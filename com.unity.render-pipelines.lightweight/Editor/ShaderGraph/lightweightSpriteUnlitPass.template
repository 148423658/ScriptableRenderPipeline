Pass
{
    Name "SpriteUnlit"
    Tags{"LightMode" = "LightweightForward"}

${Tags}
${Blending}
${Culling}
${ZTest}
${ZWrite}

    HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
    #pragma exclude_renderers d3d11_9x
    #pragma target 2.0

    #pragma vertex vert
    #pragma fragment frag

    #pragma multi_compile _ ETC1_EXTERNAL_ALPHA

${Defines}
    #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
    // #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
    // #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
    // #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
    // #include "Packages/com.unity.render-pipelines.lightweight/Shaders/UnlitInput.hlsl"
    
${Graph}
    struct GraphVertexOutput
    {
        float4 position : POSITION;
${VertexOutputStruct}
    };

    GraphVertexOutput vert (GraphVertexInput v)
    {
        GraphVertexOutput o = (GraphVertexOutput)0;
${VertexShader}
        VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

        // Vertex description inputs defined by graph
${VertexShaderDescriptionInputs}
        VertexDescription vd = PopulateVertexData(vdi);
        v.vertex.xyz = vd.Position;

        o.position = TransformObjectToHClip(v.vertex.xyz);
        // Vertex shader outputs defined by graphh
${VertexShaderOutputs}
        return o;
    }

    half4 frag (GraphVertexOutput IN) : SV_Target
    {
${PixelShader}
        SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
${PixelShaderSurfaceInputs}
        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
        float3 Color = float3(0.5, 0.5, 0.5);
        float Alpha = 1;
        float EnableAlphaTexture = 0;

${PixelShaderSurfaceRemap}

#if ETC1_EXTERNAL_ALPHA
        float4 alpha = SAMPLE_TEXTURE2D(_AlphaTex, sampler_AlphaTex, IN.uv0.xy);
        Alpha = lerp (Alpha, alpha.r, EnableAlphaTexture);
#endif

        return half4(Color, Alpha);
    }

    ENDHLSL
}