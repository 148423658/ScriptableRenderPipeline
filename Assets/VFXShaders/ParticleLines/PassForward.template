// Forward pass
Pass
{		
	Tags { "LightMode"="ForwardBase" }

	HLSLPROGRAM
	#pragma target 4.5
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		#if VFX_NEEDS_COLOR_INTERPOLATOR
		nointerpolation float4 color : COLOR0;
		#endif
		#if USE_SOFT_PARTICLE || USE_ALPHA_TEST
		nointerpolation float2 builtInInterpolants : TEXCOORD0;
		#endif
		#if USE_SOFT_PARTICLE
		float4 projPos : TEXCOORD1;		
		#endif
	};
	
	struct ps_output
	{
		float4 color : SV_Target0;
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_POSSS projPos
#define VFX_VARYING_COLOR color.rgb
#define VFX_VARYING_ALPHA color.a
#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y
	
	${VFXInclude("Assets/VFXShaders/ParticleLines/Pass.template")}	
		
	#pragma fragment frag
	ps_output frag(ps_input i)
	{
		ps_output o = (ps_output)0;
		o.color = VFXGetFragmentColor(i);
		VFXClipFragmentColor(o.color.a,i);
		return o;
	}
	ENDHLSL
}
