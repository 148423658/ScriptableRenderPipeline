#pragma vertex vert

VFX_VARYING_STRUCT vert(uint id : SV_VertexID, uint instanceID : SV_InstanceID)
{
	uint index = id;
	VFX_VARYING_STRUCT o = (VFX_VARYING_STRUCT)0;
	o.pos = -1;
	if (index < asuint(nbMax))
	{
		${VFXLoadAttributes:{alive}}
		if (alive)
		{
			${VFXLoadAttributes:{(?!(alive))(\b\w)}}
			${VFXProcessBlocks}
							
			o.VFX_VARYING_POSITIONWS = mul(VFXModelViewProj(), float4(position,1.0f));

			#if VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)
			o.VFX_VARYING_COLOR = color;
			#endif
			#if VFX_USE_ALPHA_CURRENT && defined(VFX_VARYING_ALPHA) 
			o.VFX_VARYING_ALPHA = alpha;
			#endif

			#if USE_SOFT_PARTICLE	
			#ifdef VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
			${VFXLoadParameter:{invSoftParticlesFadeDistance}}
			o.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE = invSoftParticlesFadeDistance;
			#endif
			#ifdef VFX_VARYING_POSITIONCS
			o.VFX_VARYING_POSITIONCS = ComputeScreenPos(o.pos);
			#endif
			#endif
			#if USE_ALPHA_TEST && defined(VFX_VARYING_ALPHATHRESHOLD)
			${VFXLoadParameter:{alphaThreshold}}
			o.VFX_VARYING_ALPHATHRESHOLD = alphaThreshold;
			#endif
			
			${VFXVertexProcess}
		}
	}
	return o;
}

float4 VFXGetFragmentColor(VFX_VARYING_STRUCT i)
{
	float4 color = 1.0f;
	#if VFX_NEEDS_COLOR_INTERPOLATOR
	#ifdef VFX_VARYING_COLOR
	color.rgb *= i.VFX_VARYING_COLOR;
	#endif
	#ifdef VFX_VARYING_ALPHA
	color.a *= i.VFX_VARYING_ALPHA;
	#endif
	#endif
	#if USE_SOFT_PARTICLE && defined(VFX_VARYING_POSITIONCS) && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)
	float sceneZ = LinearEyeDepth(SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.VFX_VARYING_POSITIONCS)));
	float fade = saturate(i.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE * (sceneZ - i.VFX_VARYING_POSITIONCS.w));
	fade = fade * fade * (3.0 - (2.0 * fade)); // Smoothsteping the fade
	color.a *= fade;
	#endif
	return color;
}

void VFXClipFragmentColor(float alpha,VFX_VARYING_STRUCT i)
{
	#if USE_ALPHA_TEST && defined(VFX_VARYING_ALPHATHRESHOLD)
	clip(alpha - i.VFX_VARYING_ALPHATHRESHOLD);
	#endif
}

//#undef VFX_VARYING_STRUCT
//#undef VFX_VARYING_POSITIONWS
//#undef VFX_VARYING_POSITIONCS
//#undef VFX_VARYING_COLOR
//#undef VFX_VARYING_ALPHA
//#undef VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
//#undef VFX_VARYING_ALPHATHRESHOLD