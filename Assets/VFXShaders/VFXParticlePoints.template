Shader "Hidden/VFX/ParticlePoints"
{
	SubShader
	{
		Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
		Pass
		{
			${VFXOutputRenderState}
			Cull Off
				
			CGPROGRAM
				#pragma target 4.5
				#if !defined(VFX_WORLD_SPACE) && !defined(VFX_LOCAL_SPACE)
				#define VFX_LOCAL_SPACE 1
				#endif
				
				#include "UnityCG.cginc"
				${VFXGlobalInclude}
				${VFXGlobalDeclaration}
				${VFXGeneratedBlockFunction}
				
				ByteAddressBuffer attributeBuffer;
				
				#pragma vertex vert
				#pragma fragment frag
				
#if USE_SOFT_PARTICLE
				sampler2D_float _CameraDepthTexture;
#endif
				
				struct ps_input
				{
					float4 pos : SV_POSITION;
#if VFX_USE_COLOR_CURRENT
					nointerpolation float3 color : COLOR0;
#endif
#if USE_SOFT_PARTICLE
					nointerpolation float invSoftParticlesFadeDistance : INV_FADE_DISTANCE;
					float4 projPos : PROJ_POSITION;			
#endif
				};
				
				struct ps_output
				{
					float4 color : SV_Target0;
				};
				
				ps_input vert(uint id : SV_VertexID, uint instanceID : SV_InstanceID)
				{
					uint index = id;
					${VFXLoadAttributes}
					${VFXProcessBlocks}
					
					ps_input o = (ps_input)0;
					o.pos = mul(VFXModelViewProj(), float4(position,1.0f));

#if VFX_USE_COLOR_CURRENT
					o.color = color;
#endif

#if USE_SOFT_PARTICLE
					o.projPos = ComputeScreenPos(o.pos);		
					${VFXLoadParameter:{invSoftParticlesFadeDistance}}
					o.invSoftParticlesFadeDistance = invSoftParticlesFadeDistance;
#endif
					
					return o;
				}
				
				ps_output frag(ps_input i)
				{
					ps_output o = (ps_output)0;
					
					o.color = 1.0f;
#if VFX_USE_COLOR_CURRENT
					o.color.rgb *= i.color.rgb;
#endif

#if USE_SOFT_PARTICLE
					float sceneZ = LinearEyeDepth(SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));
					float fade = saturate(i.invSoftParticlesFadeDistance * (sceneZ - i.projPos.w));
					fade = fade * fade * (3.0 - (2.0 * fade)); // Smoothsteping the fade
					o.color.a *= fade;
#endif
					return o;
				}
			ENDCG
		}
	}
	Fallback "Diffuse"
}
