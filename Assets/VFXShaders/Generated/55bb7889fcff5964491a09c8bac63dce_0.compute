#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(initUniforms)
	float3 initUniform1_kVFXTransformPosOp;
	float initUniform0_kVFXValueOp;
	
	float initUniform2_kVFXValueOp;
	uint initUniform3_kVFXSystemSeedOp;
	uint nbSpawned;
	uint spawnIndex;
	
CBUFFER_END

CBUFFER_START(updateUniforms)
	float4x4 updateUniform4_kVFXTransformMatrixOp;
	
	float4x4 updateUniform12_kVFXInverseTRSOp;
	
	float4 updateUniform0_kVFXValueOp;
	
	float3 updateUniform1_kVFXTransformPosOp;
	float updateUniform2_kVFXValueOp;
	
	float updateUniform3_kVFXValueOp;
	float updateUniform5_kVFXValueOp;
	float updateUniform6_kVFXValueOp;
	float updateUniform7_kVFXValueOp;
	
	float updateUniform8_kVFXValueOp;
	float updateUniform9_kVFXValueOp;
	float updateUniform10_kVFXValueOp;
	float updateUniform11_kVFXValueOp;
	
	float updateUniform13_kVFXDeltaTimeOp;
	uint nbMax;
	uint2 updateUniforms_PADDING_0;

CBUFFER_END

Texture3D updateSampler0_kVFXValueOpTexture;
SamplerState samplerupdateSampler0_kVFXValueOpTexture;

Texture2D floatTexture;
SamplerState samplerfloatTexture;

struct Attribute0
{
	float lifetime;
};

struct Attribute1
{
	float3 position;
	uint _PADDING_0;
};

struct Attribute2
{
	float2 size;
};

struct Attribute3
{
	float3 velocity;
	float age;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
StructuredBuffer<Attribute0> attribBuffer0_RO;
RWStructuredBuffer<Attribute1> attribBuffer1;
RWStructuredBuffer<Attribute2> attribBuffer2;
RWStructuredBuffer<Attribute3> attribBuffer3;

struct OutputData
{
	float3 position;
	uint _PADDING_0;
	float2 size;
	uint2 _PADDING_1;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

#if USE_DYNAMIC_AABB
RWStructuredBuffer<uint3> bounds;
#endif

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

float4 sampleSignal(float v,float u) // sample gradient
{
	return floatTexture.SampleLevel(samplerfloatTexture,float2(((0.9921875 * saturate(u)) + 0.00390625),v),0);
}

// Non optimized generic function to allow curve edition without recompiling
float sampleSignal(float4 curveData,float u) // sample curve
{
	float uNorm = (u * curveData.x) + curveData.y;
	switch(asuint(curveData.w) >> 2)
	{
		case 1: uNorm = ((0.9921875 * frac(min(1.0f - 1e-5f,uNorm))) + 0.00390625); break; // clamp end
		case 2: uNorm = ((0.9921875 * frac(max(0.0f,uNorm))) + 0.00390625); break; // clamp start
		case 3: uNorm = ((0.9921875 * saturate(uNorm)) + 0.00390625); break; // clamp both
	}
	return floatTexture.SampleLevel(samplerfloatTexture,float2(uNorm,curveData.z),0)[asuint(curveData.w) & 0x3];
}

float3 sampleSpline(float v,float u)
{
	return floatTexture.SampleLevel(samplerfloatTexture,float2(((0.9921875 * saturate(u)) + 0.00390625),v),0);
}

#if USE_DYNAMIC_AABB
groupshared uint3 boundsLDS[2];

#endif
void VFXBlockSetLifetimeConstant( inout float lifetime,float Lifetime)
{
	lifetime = max(Lifetime,0.0f);
}

void VFXBlockSetPositionSphereSurface( inout float3 position,float3 Sphere_center,float Sphere_radius,inout uint seed)
{
	float u1 = 2.0 * RAND - 1.0;
	float u2 = UNITY_TWO_PI * RAND;
	position = VFXPositionOnSphereSurface(Sphere,u1,u2);
}

void VFXBlockSizeOverLifeCurve( inout float2 size,float age,float lifetime,float4 Curve)
{
	float ratio = saturate(age/lifetime);
	float s = SAMPLE(Curve, ratio);
	size = float2(s,s);
}

void VFXBlockCollideWithSphere( inout float3 position,inout float3 velocity,float3 Sphere_center,float Sphere_radius,float Elasticity,float deltaTime)
{
	float3 nextPos = position + velocity * deltaTime;
	float3 dir = Sphere_center - nextPos;
	float sqrLength = dot(dir,dir);
	if (sqrLength <= Sphere_radius * Sphere_radius)
	{	
		float dist = sqrt(sqrLength);
		float3 n = dir / dist;	
		float projVelocity = dot(n,velocity);
		
		if (projVelocity > 0)
			velocity -= ((1 + Elasticity) * projVelocity) * n;
			
		position += n * (dist - Sphere_radius);
	}
}

void VFXBlockVectorFieldRelativeForce( inout float3 velocity,float3 position,VFXSampler3D VectorField,float4x4 Box,float4x4 InvBox,float Intensity,float DragCoefficient,float deltaTime)
{
	float3 vectorFieldCoord = mul(INVERSE(Box), float4(position,1.0f)).xyz;
	float3 value = SampleTexture(VectorField, vectorFieldCoord + 0.5f).xyz * 2.0f - 1.0f;
	value = mul(Box,float4(value,0.0f)).xyz * Intensity;
	float3 relativeForce = value - velocity;
	velocity += relativeForce * min(1.0,(DragCoefficient * deltaTime));
}

void VFXBlockSetForceConformToSphere( inout float3 velocity,float3 position,float3 Sphere_center,float Sphere_radius,float attractionSpeed,float attractionForce,float stickForce,float stickDistance,float deltaTime)
{
	float3 dir = Sphere_center - position;
	float distToCenter = length(dir);
	float distToSurface = distToCenter - Sphere_radius;
	dir /= distToCenter;
	float spdNormal = dot(dir,velocity);
	float ratio = smoothstep(0.0,stickDistance * 2.0,abs(distToSurface));
	float tgtSpeed = sign(distToSurface) * attractionSpeed * ratio;
	float deltaSpeed = tgtSpeed - spdNormal;
	velocity += sign(deltaSpeed) * min(abs(deltaSpeed),deltaTime * lerp(stickForce,attractionForce,ratio)) * dir;
}

void VFXBlockSetForceLinearDrag( inout float3 velocity,float DragCoefficient,float deltaTime)
{
	velocity *= max(0.0,(1.0 - DragCoefficient * deltaTime));
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ initUniform3_kVFXSystemSeedOp;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockSetLifetimeConstant( attrib0.lifetime,initUniform0_kVFXValueOp);
		VFXBlockSetPositionSphereSurface( attrib1.position,initUniform1_kVFXTransformPosOp,initUniform2_kVFXValueOp,local_seed);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	#if USE_DYNAMIC_AABB
	if (groupId.x == 0)
	{
		boundsLDS[0] = (uint3)0xFFFFFFFF;
		boundsLDS[1] = (uint3)0;
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	#endif
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0_RO[index];
		Attribute1 attrib1 = attribBuffer1[index];
		Attribute2 attrib2 = attribBuffer2[index];
		Attribute3 attrib3 = attribBuffer3[index];
		
		VFXSampler3D updateSampler0_kVFXValueOp = InitSampler(updateSampler0_kVFXValueOpTexture,samplerupdateSampler0_kVFXValueOpTexture);
		
		VFXBlockSizeOverLifeCurve( attrib2.size,attrib3.age,attrib0.lifetime,updateUniform0_kVFXValueOp);
		VFXBlockCollideWithSphere( attrib1.position,attrib3.velocity,updateUniform1_kVFXTransformPosOp,updateUniform2_kVFXValueOp,updateUniform3_kVFXValueOp,updateUniform13_kVFXDeltaTimeOp);
		VFXBlockVectorFieldRelativeForce( attrib3.velocity,attrib1.position,updateSampler0_kVFXValueOp,updateUniform4_kVFXTransformMatrixOp,updateUniform12_kVFXInverseTRSOp,updateUniform5_kVFXValueOp,updateUniform6_kVFXValueOp,updateUniform13_kVFXDeltaTimeOp);
		VFXBlockSetForceConformToSphere( attrib3.velocity,attrib1.position,updateUniform1_kVFXTransformPosOp,updateUniform2_kVFXValueOp,updateUniform7_kVFXValueOp,updateUniform8_kVFXValueOp,updateUniform9_kVFXValueOp,updateUniform10_kVFXValueOp,updateUniform13_kVFXDeltaTimeOp);
		VFXBlockSetForceLinearDrag( attrib3.velocity,updateUniform11_kVFXValueOp,updateUniform13_kVFXDeltaTimeOp);
		
		attrib1.position += attrib3.velocity * updateUniform13_kVFXDeltaTimeOp;
		
		attrib3.age += updateUniform13_kVFXDeltaTimeOp;
		if (attrib3.age >= attrib0.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer1[index] = attrib1;
			attribBuffer2[index] = attrib2;
			attribBuffer3[index] = attrib3;
			
			OutputData outputData = (OutputData)0;
			outputData.position = attrib1.position;
			outputData.size = attrib2.size;
			outputBuffer.Append(outputData);
			#if USE_DYNAMIC_AABB
			
			uint3 sortablePos = ConvertFloatToSortableUint(attrib1.position);
			
			InterlockedMin(boundsLDS[0].x,sortablePos.x);
			InterlockedMin(boundsLDS[0].y,sortablePos.y);
			InterlockedMin(boundsLDS[0].z,sortablePos.z);
			
			InterlockedMax(boundsLDS[1].x,sortablePos.x);
			InterlockedMax(boundsLDS[1].y,sortablePos.y);
			InterlockedMax(boundsLDS[1].z,sortablePos.z);
			#endif
		}
	}
	#if USE_DYNAMIC_AABB
	
	GroupMemoryBarrierWithGroupSync();
	
	if (groupId.x == 0)
	{
		InterlockedMin(bounds[0].x,boundsLDS[0].x);
		InterlockedMin(bounds[0].y,boundsLDS[0].y);
		InterlockedMin(bounds[0].z,boundsLDS[0].z);
		
		InterlockedMax(bounds[1].x,boundsLDS[1].x);
		InterlockedMax(bounds[1].y,boundsLDS[1].y);
		InterlockedMax(bounds[1].z,boundsLDS[1].z);
	}
	#endif
}

