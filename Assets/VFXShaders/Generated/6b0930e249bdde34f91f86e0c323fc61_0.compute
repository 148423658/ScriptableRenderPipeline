#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 20

CBUFFER_START(initUniforms)
	float4x4 initUniform4_kVFXTransformMatrixOp;
	
	float initUniform0_kVFXValueOp;
	float initUniform1_kVFXValueOp;
	float initUniform2_kVFXValueOp;
	float initUniform3_kVFXValueOp;
	
	uint initUniform5_kVFXSystemSeedOp;
	uint nbSpawned;
	uint spawnIndex;
	uint initUniforms_PADDING_0;

CBUFFER_END

CBUFFER_START(updateUniforms)
	float updateUniform0_kVFXValueOp;
	float updateUniform1_kVFXValueOp;
	float updateUniform2_kVFXDeltaTimeOp;
	uint nbMax;
	
CBUFFER_END

struct Attribute0
{
	float age;
	float texIndex;
};

struct Attribute1
{
	float3 position;
	float lifetime;
};

struct Attribute2
{
	float phase;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
StructuredBuffer<Attribute1> attribBuffer1_RO;
RWStructuredBuffer<Attribute2> attribBuffer2;
StructuredBuffer<Attribute2> attribBuffer2_RO;

struct OutputData
{
	float3 position;
	float age;
	float texIndex;
	float lifetime;
	uint2 _PADDING_0;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

#if USE_DYNAMIC_AABB
RWStructuredBuffer<uint3> bounds;
#endif

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

#if USE_DYNAMIC_AABB
groupshared uint3 boundsLDS[2];

#endif
void VFXBlockSetSubUVRandom( inout float texIndex,float MinIndex,float MaxIndex,inout uint seed)
{
	texIndex = lerp(MinIndex,MaxIndex,RAND);
}

void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockSetPositionBox( inout float3 position,float4x4 box,inout uint seed)
{
	position = RAND3 - 0.5f;
	position = mul(box,float4(position,1.0f)).xyz;
}

void VFXBlockSubUVAnimateRandomRate( inout float texIndex,float phase,float MinFramerate,float MaxFramerate,float deltaTime)
{
	texIndex += lerp(MinFramerate, MaxFramerate, phase) * deltaTime;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ initUniform5_kVFXSystemSeedOp;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockSetSubUVRandom( attrib0.texIndex,initUniform0_kVFXValueOp,initUniform1_kVFXValueOp,local_seed);
		VFXBlockSetLifetimeRandom( attrib1.lifetime,initUniform2_kVFXValueOp,initUniform3_kVFXValueOp,local_seed);
		VFXBlockSetPositionBox( attrib1.position,initUniform4_kVFXTransformMatrixOp,local_seed);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	#if USE_DYNAMIC_AABB
	if (groupId.x == 0)
	{
		boundsLDS[0] = (uint3)0xFFFFFFFF;
		boundsLDS[1] = (uint3)0;
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	#endif
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0[index];
		Attribute1 attrib1 = attribBuffer1_RO[index];
		Attribute2 attrib2 = attribBuffer2_RO[index];
		
		
		VFXBlockSubUVAnimateRandomRate( attrib0.texIndex,attrib2.phase,updateUniform0_kVFXValueOp,updateUniform1_kVFXValueOp,updateUniform2_kVFXDeltaTimeOp);
		
		attrib0.age += updateUniform2_kVFXDeltaTimeOp;
		if (attrib0.age >= attrib1.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer0[index] = attrib0;
			
			OutputData outputData = (OutputData)0;
			outputData.position = attrib1.position;
			outputData.age = attrib0.age;
			outputData.texIndex = attrib0.texIndex;
			outputData.lifetime = attrib1.lifetime;
			outputBuffer.Append(outputData);
			#if USE_DYNAMIC_AABB
			
			uint3 sortablePos = ConvertFloatToSortableUint(attrib1.position);
			
			InterlockedMin(boundsLDS[0].x,sortablePos.x);
			InterlockedMin(boundsLDS[0].y,sortablePos.y);
			InterlockedMin(boundsLDS[0].z,sortablePos.z);
			
			InterlockedMax(boundsLDS[1].x,sortablePos.x);
			InterlockedMax(boundsLDS[1].y,sortablePos.y);
			InterlockedMax(boundsLDS[1].z,sortablePos.z);
			#endif
		}
	}
	#if USE_DYNAMIC_AABB
	
	GroupMemoryBarrierWithGroupSync();
	
	if (groupId.x == 0)
	{
		InterlockedMin(bounds[0].x,boundsLDS[0].x);
		InterlockedMin(bounds[0].y,boundsLDS[0].y);
		InterlockedMin(bounds[0].z,boundsLDS[0].z);
		
		InterlockedMax(bounds[1].x,boundsLDS[1].x);
		InterlockedMax(bounds[1].y,boundsLDS[1].y);
		InterlockedMax(bounds[1].z,boundsLDS[1].z);
	}
	#endif
}

