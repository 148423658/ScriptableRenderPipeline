#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(GlobalInfo)
	float deltaTime;
	float totalTime;
	uint nbMax;
	uint systemSeed;
CBUFFER_END

CBUFFER_START(SpawnInfo)
	uint nbSpawned;
	uint spawnIndex;
CBUFFER_END

CBUFFER_START(initUniforms)
	float3 initUniform0;
	float initUniform1;
	float3 initUniform2;
	float3 initUniform3;
	float initUniform4;
	float initUniform5;
	float initUniform6;
	float3 initUniform7;
CBUFFER_END

CBUFFER_START(updateUniforms)
	float3 updateUniform0;
CBUFFER_END

struct Attribute0
{
	float3 position;
	float age;
};

struct Attribute1
{
	float3 color;
	uint _PADDING_0;
};

struct Attribute2
{
	float lifetime;
};

struct Attribute3
{
	float2 size;
};

struct Attribute4
{
	float3 velocity;
	uint _PADDING_0;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
StructuredBuffer<Attribute1> attribBuffer1_RO;
RWStructuredBuffer<Attribute2> attribBuffer2;
StructuredBuffer<Attribute2> attribBuffer2_RO;
RWStructuredBuffer<Attribute3> attribBuffer3;
StructuredBuffer<Attribute3> attribBuffer3_RO;
RWStructuredBuffer<Attribute4> attribBuffer4;

struct OutputData
{
	float3 position;
	float age;
	float3 color;
	float lifetime;
	float2 size;
	uint2 _PADDING_0;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

RWStructuredBuffer<uint3> bounds;

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

void VFXBlockSetPositionSphereSurface( inout float3 position,float3 Sphere_center,float Sphere_radius,inout uint seed)
{
	float u1 = 2.0 * RAND - 1.0;
	float u2 = UNITY_TWO_PI * RAND;
	position = VFXPositionOnSphereSurface(Sphere,u1,u2);
}

void VFXBlockSetColorRandom( inout float3 color,float3 FirstColor,float3 AltColor,inout uint seed)
{
	color = lerp(FirstColor,AltColor,RAND3);
}

void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockSizeConstantSquare( inout float2 size,float Size)
{
	size = float2(Size,Size);
}

void VFXBlockVelocityConstant( inout float3 velocity,float3 Velocity)
{
	velocity += Velocity;
}

void VFXBlockSetForceConstant( inout float3 velocity,float3 Force)
{
	velocity += Force * deltaTime;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		Attribute4 attrib4 = (Attribute4)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ systemSeed;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockSetPositionSphereSurface( attrib0.position,initUniform0,initUniform1,local_seed);
		VFXBlockSetColorRandom( attrib1.color,initUniform2,initUniform3,local_seed);
		VFXBlockSetLifetimeRandom( attrib2.lifetime,initUniform4,initUniform5,local_seed);
		VFXBlockSizeConstantSquare( attrib3.size,initUniform6);
		VFXBlockVelocityConstant( attrib4.velocity,initUniform7);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		attribBuffer4[index] = attrib4;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0[index];
		Attribute1 attrib1 = attribBuffer1_RO[index];
		Attribute2 attrib2 = attribBuffer2_RO[index];
		Attribute3 attrib3 = attribBuffer3_RO[index];
		Attribute4 attrib4 = attribBuffer4[index];
		
		
		VFXBlockSetForceConstant( attrib4.velocity,updateUniform0);
		
		attrib0.position += attrib4.velocity * deltaTime;
		
		attrib0.age += deltaTime;
		if (attrib0.age >= attrib2.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer0[index] = attrib0;
			attribBuffer4[index] = attrib4;
			
			OutputData outputData = (OutputData)0;
			outputData.position = attrib0.position;
			outputData.age = attrib0.age;
			outputData.color = attrib1.color;
			outputData.lifetime = attrib2.lifetime;
			outputData.size = attrib3.size;
			outputBuffer.Append(outputData);
		}
	}
}

