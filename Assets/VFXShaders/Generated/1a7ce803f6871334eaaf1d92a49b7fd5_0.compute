#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(initUniforms)
	float3 initUniform0_kVFXTransformPosOp;
	float initUniform1_kVFXValueOp;
	
	float3 initUniform2_kVFXCombine3fOp;
	float initUniform4_kVFXValueOp;
	
	float3 initUniform3_kVFXCombine3fOp;
	float initUniform5_kVFXValueOp;
	
	float3 initUniform6_kVFXTransformVecOp;
	uint initUniform7_kVFXSystemSeedOp;
	
	uint nbSpawned;
	uint spawnIndex;
	uint2 initUniforms_PADDING_0;

CBUFFER_END

CBUFFER_START(updateUniforms)
	float3 updateUniform0_kVFXTransformVecOp;
	float updateUniform3_kVFXValueOp;
	float4 updateUniform1_kVFXValueOp;
	
	float3 updateUniform2_kVFXTransformPosOp;
	float updateUniform4_kVFXValueOp;
	
	float updateUniform5_kVFXValueOp;
	float updateUniform6_kVFXValueOp;
	float updateUniform7_kVFXValueOp;
	float updateUniform8_kVFXDeltaTimeOp;
	
	uint nbMax;
	uint3 updateUniforms_PADDING_0;

CBUFFER_END

Texture2D curveTexture;
SamplerState samplercurveTexture;

struct Attribute0
{
	float3 position;
	uint _PADDING_0;
};

struct Attribute1
{
	float2 size;
};

struct Attribute2
{
	float3 color;
	uint _PADDING_0;
};

struct Attribute3
{
	float lifetime;
};

struct Attribute4
{
	float3 velocity;
	float age;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
RWStructuredBuffer<Attribute2> attribBuffer2;
RWStructuredBuffer<Attribute3> attribBuffer3;
StructuredBuffer<Attribute3> attribBuffer3_RO;
RWStructuredBuffer<Attribute4> attribBuffer4;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

RWStructuredBuffer<uint3> bounds;

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

// Non optimized generic function to allow curve edition without recompiling
float sampleSignal(float4 curveData,float u) // sample curve
{
	float uNorm = (u * curveData.x) + curveData.y;
	switch(asuint(curveData.w) >> 2)
	{
		case 1: uNorm = ((0.9921875 * frac(min(1.0f - 1e-5f,uNorm))) + 0.00390625); break; // clamp end
		case 2: uNorm = ((0.9921875 * frac(max(0.0f,uNorm))) + 0.00390625); break; // clamp start
		case 3: uNorm = ((0.9921875 * saturate(uNorm)) + 0.00390625); break; // clamp both
	}
	return curveTexture.SampleLevel(samplercurveTexture,float2(uNorm,curveData.z),0)[asuint(curveData.w) & 0x3];
}

void VFXBlockSetPositionSphereSurface( inout float3 position,float3 Sphere_center,float Sphere_radius,uint systemSeed,inout uint seed)
{
	float u1 = 2.0 * RAND - 1.0;
	float u2 = UNITY_TWO_PI * RAND;
	position = VFXPositionOnSphereSurface(Sphere,u1,u2);
}

void VFXBlockSetColorRandom( inout float3 color,float3 FirstColor,float3 AltColor,uint systemSeed,inout uint seed)
{
	color = lerp(FirstColor,AltColor,RAND3);
}

void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,uint systemSeed,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockVelocityConstant( inout float3 velocity,float3 Velocity)
{
	velocity += Velocity;
}

void VFXBlockSetForceConstant( inout float3 velocity,float3 Force,float deltaTime)
{
	velocity += Force * deltaTime;
}

void VFXBlockSizeOverLifeCurve( inout float2 size,float age,float lifetime,float4 Curve)
{
	float ratio = saturate(age/lifetime);
	float s = sampleSignal(Curve, ratio);
	size = float2(s,s);
}

void VFXBlockSetForceConformToSphere( inout float3 velocity,float3 position,float3 Sphere_center,float Sphere_radius,float attractionSpeed,float attractionForce,float stickForce,float stickDistance,float deltaTime)
{
	float3 dir = Sphere_center - position;
	float distToCenter = length(dir);
	float distToSurface = distToCenter - Sphere_radius;
	dir /= distToCenter;
	float spdNormal = dot(dir,velocity);
	float ratio = smoothstep(0.0,stickDistance * 2.0,abs(distToSurface));
	float tgtSpeed = sign(distToSurface) * attractionSpeed * ratio;
	float deltaSpeed = tgtSpeed - spdNormal;
	velocity += sign(deltaSpeed) * min(abs(deltaSpeed),deltaTime * lerp(stickForce,attractionForce,ratio)) * dir;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		Attribute4 attrib4 = (Attribute4)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ initUniform7_kVFXSystemSeedOp;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockSetPositionSphereSurface( attrib0.position,initUniform0_kVFXTransformPosOp,initUniform1_kVFXValueOp,initUniform7_kVFXSystemSeedOp,local_seed);
		VFXBlockSetColorRandom( attrib2.color,initUniform2_kVFXCombine3fOp,initUniform3_kVFXCombine3fOp,initUniform7_kVFXSystemSeedOp,local_seed);
		VFXBlockSetLifetimeRandom( attrib3.lifetime,initUniform4_kVFXValueOp,initUniform5_kVFXValueOp,initUniform7_kVFXSystemSeedOp,local_seed);
		VFXBlockVelocityConstant( attrib4.velocity,initUniform6_kVFXTransformVecOp);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		attribBuffer4[index] = attrib4;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0[index];
		Attribute1 attrib1 = attribBuffer1[index];
		Attribute3 attrib3 = attribBuffer3_RO[index];
		Attribute4 attrib4 = attribBuffer4[index];
		
		
		VFXBlockSetForceConstant( attrib4.velocity,updateUniform0_kVFXTransformVecOp,updateUniform8_kVFXDeltaTimeOp);
		VFXBlockSizeOverLifeCurve( attrib1.size,attrib4.age,attrib3.lifetime,updateUniform1_kVFXValueOp);
		VFXBlockSetForceConformToSphere( attrib4.velocity,attrib0.position,updateUniform2_kVFXTransformPosOp,updateUniform3_kVFXValueOp,updateUniform4_kVFXValueOp,updateUniform5_kVFXValueOp,updateUniform6_kVFXValueOp,updateUniform7_kVFXValueOp,updateUniform8_kVFXDeltaTimeOp);
		
		attrib0.position += attrib4.velocity * updateUniform8_kVFXDeltaTimeOp;
		
		attrib4.age += updateUniform8_kVFXDeltaTimeOp;
		if (attrib4.age >= attrib3.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer0[index] = attrib0;
			attribBuffer1[index] = attrib1;
			attribBuffer4[index] = attrib4;
		}
	}
}

