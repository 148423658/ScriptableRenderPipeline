#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(initUniforms)
	float2 initUniform0_kVFXValueOp;
	float initUniform1_kVFXValueOp;
	float initUniform2_kVFXValueOp;
	
	float initUniform3_kVFXValueOp;
	float initUniform4_kVFXValueOp;
	uint initUniform5_kVFXSystemSeedOp;
	uint nbSpawned;
	
	uint spawnIndex;
	uint3 initUniforms_PADDING_0;

CBUFFER_END

CBUFFER_START(updateUniforms)
	float updateUniform0_kVFXValueOp;
	float updateUniform1_kVFXDeltaTimeOp;
	uint nbMax;
	uint updateUniforms_PADDING_0;

CBUFFER_END

Texture2D gradientTexture;
SamplerState samplergradientTexture;

Texture2D curveTexture;
SamplerState samplercurveTexture;

struct Attribute0
{
	float3 position;
	uint _PADDING_0;
};

struct Attribute1
{
	float2 size;
};

struct Attribute2
{
	float lifetime;
};

struct Attribute3
{
	float3 color;
	uint _PADDING_0;
};

struct Attribute4
{
	float alpha;
};

struct Attribute5
{
	float age;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
RWStructuredBuffer<Attribute2> attribBuffer2;
StructuredBuffer<Attribute2> attribBuffer2_RO;
RWStructuredBuffer<Attribute3> attribBuffer3;
RWStructuredBuffer<Attribute4> attribBuffer4;
RWStructuredBuffer<Attribute5> attribBuffer5;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

RWStructuredBuffer<uint3> bounds;

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

float4 sampleSignal(float v,float u) // sample gradient
{
	return gradientTexture.SampleLevel(samplergradientTexture,float2(((0.9921875 * saturate(u)) + 0.00390625),v),0);
}

// Non optimized generic function to allow curve edition without recompiling
float sampleSignal(float4 curveData,float u) // sample curve
{
	float uNorm = (u * curveData.x) + curveData.y;
	switch(asuint(curveData.w) >> 2)
	{
		case 1: uNorm = ((0.9921875 * frac(min(1.0f - 1e-5f,uNorm))) + 0.00390625); break; // clamp end
		case 2: uNorm = ((0.9921875 * frac(max(0.0f,uNorm))) + 0.00390625); break; // clamp start
		case 3: uNorm = ((0.9921875 * saturate(uNorm)) + 0.00390625); break; // clamp both
	}
	return curveTexture.SampleLevel(samplercurveTexture,float2(uNorm,curveData.z),0)[asuint(curveData.w) & 0x3];
}

float3 sampleSpline(float v,float u)
{
	return curveTexture.SampleLevel(samplercurveTexture,float2(((0.9921875 * saturate(u)) + 0.00390625),v),0);
}

void VFXBlockPositionSpline( inout float3 position,float2 Spline,uint systemSeed,inout uint seed)
{
	float t = RAND;
	float3 center = SAMPLE_SPLINE_POSITION(Spline,t);
	float3 tangent = normalize(SAMPLE_SPLINE_TANGENT(Spline,t));
	position += PositionOnCylinderSurface(center,tangent,0.0f,0.25f,0.0f,RAND * UNITY_TWO_PI);
}

void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,uint systemSeed,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockSizeRandomSquare( inout float2 size,float MinSize,float MaxSize,uint systemSeed,inout uint seed)
{
	float s = lerp(MinSize,MaxSize,RAND);
	size = float2(s,s);
}

void VFXBlockSetColorGradientOverLifetime( inout float3 color,inout float alpha,float age,float lifetime,float Gradient)
{
	float ratio = saturate(age / lifetime);
	float4 rgba = SAMPLE(Gradient,ratio);
	color = rgba.rgb;
	alpha = rgba.a;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		Attribute4 attrib4 = (Attribute4)0;
		Attribute5 attrib5 = (Attribute5)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ initUniform5_kVFXSystemSeedOp;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockPositionSpline( attrib0.position,initUniform0_kVFXValueOp,initUniform5_kVFXSystemSeedOp,local_seed);
		VFXBlockSetLifetimeRandom( attrib2.lifetime,initUniform1_kVFXValueOp,initUniform2_kVFXValueOp,initUniform5_kVFXSystemSeedOp,local_seed);
		VFXBlockSizeRandomSquare( attrib1.size,initUniform3_kVFXValueOp,initUniform4_kVFXValueOp,initUniform5_kVFXSystemSeedOp,local_seed);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		attribBuffer4[index] = attrib4;
		attribBuffer5[index] = attrib5;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute2 attrib2 = attribBuffer2_RO[index];
		Attribute3 attrib3 = attribBuffer3[index];
		Attribute4 attrib4 = attribBuffer4[index];
		Attribute5 attrib5 = attribBuffer5[index];
		
		
		VFXBlockSetColorGradientOverLifetime( attrib3.color,attrib4.alpha,attrib5.age,attrib2.lifetime,updateUniform0_kVFXValueOp);
		
		attrib5.age += updateUniform1_kVFXDeltaTimeOp;
		if (attrib5.age >= attrib2.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer3[index] = attrib3;
			attribBuffer4[index] = attrib4;
			attribBuffer5[index] = attrib5;
		}
	}
}

