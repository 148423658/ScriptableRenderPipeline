#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(initUniforms)
	float3 initUniform0_kVFXCombine3fOp;
	float initUniform1_kVFXValueOp;
	
	float initUniform2_kVFXValueOp;
	uint initUniform3_kVFXSystemSeedOp;
	uint nbSpawned;
	uint spawnIndex;
	
CBUFFER_END

CBUFFER_START(updateUniforms)
	float updateUniform0_kVFXDeltaTimeOp;
	uint nbMax;
	uint2 updateUniforms_PADDING_0;

CBUFFER_END

struct Attribute0
{
	float3 position;
	uint _PADDING_0;
};

struct Attribute1
{
	float lifetime;
};

struct Attribute2
{
	float age;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
StructuredBuffer<Attribute0> attribBuffer0_RO;
RWStructuredBuffer<Attribute1> attribBuffer1;
StructuredBuffer<Attribute1> attribBuffer1_RO;
RWStructuredBuffer<Attribute2> attribBuffer2;

struct OutputData
{
	float3 position;
	uint _PADDING_0;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

RWStructuredBuffer<uint3> bounds;

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

void VFXBlockSetPositionSphereVolume( inout float3 position,float3 Sphere_center,float Sphere_radius,inout uint seed)
{
	float u1 = 2.0 * RAND - 1.0;
	float u2 = UNITY_TWO_PI * RAND;
	float u3 = pow(RAND,1.0/3.0);
	position = VFXPositionOnSphere(Sphere,u1,u2,u3);
}

void VFXBlockSetLifetimeConstant( inout float lifetime,float Lifetime)
{
	lifetime = max(Lifetime,0.0f);
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ initUniform3_kVFXSystemSeedOp;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockSetPositionSphereVolume( attrib0.position,initUniform0_kVFXCombine3fOp,initUniform1_kVFXValueOp,local_seed);
		VFXBlockSetLifetimeConstant( attrib1.lifetime,initUniform2_kVFXValueOp);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0_RO[index];
		Attribute1 attrib1 = attribBuffer1_RO[index];
		Attribute2 attrib2 = attribBuffer2[index];
		
		
		
		attrib2.age += updateUniform0_kVFXDeltaTimeOp;
		if (attrib2.age >= attrib1.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer2[index] = attrib2;
			
			OutputData outputData = (OutputData)0;
			outputData.position = attrib0.position;
			outputBuffer.Append(outputData);
		}
	}
}

