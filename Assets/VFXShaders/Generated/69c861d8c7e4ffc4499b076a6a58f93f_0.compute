#pragma kernel CSVFXInit

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(initUniforms)
	float3 initUniform0_kVFXCombine3fOp;
	float initUniform1_kVFXValueOp;
	
	uint initUniform2_kVFXSystemSeedOp;
	uint nbSpawned;
	uint spawnIndex;
	uint initUniforms_PADDING_0;

CBUFFER_END

CBUFFER_START(updateUniforms)
	uint nbMax;
	uint3 updateUniforms_PADDING_0;

CBUFFER_END

struct Attribute0
{
	float3 position;
	uint _PADDING_0;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
StructuredBuffer<Attribute0> attribBuffer0_RO;

#if USE_DYNAMIC_AABB
RWStructuredBuffer<uint3> bounds;
#endif

void VFXBlockSetPositionSphereSurface( inout float3 position,float3 Sphere_center,float Sphere_radius,inout uint seed)
{
	float u1 = 2.0 * RAND - 1.0;
	float u2 = UNITY_TWO_PI * RAND;
	position = VFXPositionOnSphereSurface(Sphere,u1,u2);
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbSpawned)
	{
		uint index = id.x + spawnIndex;
		
		Attribute0 attrib0 = (Attribute0)0;
		
		uint local_seed = (uint)0;
		
		
		local_seed = WangHash((id.x + spawnIndex) ^ initUniform2_kVFXSystemSeedOp);
		VFXBlockSetPositionSphereSurface( attrib0.position,initUniform0_kVFXCombine3fOp,initUniform1_kVFXValueOp,local_seed);
		
		attribBuffer0[index] = attrib0;
	}
}

