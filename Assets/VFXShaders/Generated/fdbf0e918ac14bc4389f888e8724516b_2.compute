#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 200

CBUFFER_START(initUniforms)
	float3 initUniform0_kVFXTransformPosOp;
	float initUniform2_kVFXValueOp;
	
	float3 initUniform1_kVFXTransformDirOp;
	float initUniform3_kVFXValueOp;
	
	float initUniform4_kVFXValueOp;
	float initUniform5_kVFXValueOp;
	float initUniform6_kVFXValueOp;
	float initUniform7_kVFXValueOp;
	
	float initUniform8_kVFXValueOp;
	uint initUniform9_kVFXSystemSeedOp;
	uint nbSpawned;
	uint spawnIndex;
	
CBUFFER_END

CBUFFER_START(updateUniforms)
	float3 updateUniform0_kVFXTransformVecOp;
	float updateUniform1_kVFXDeltaTimeOp;
	
	uint nbMax;
	uint3 updateUniforms_PADDING_0;

CBUFFER_END

struct Attribute0
{
	float3 position;
	float age;
};

struct Attribute1
{
	float lifetime;
};

struct Attribute2
{
	float2 size;
};

struct Attribute3
{
	float3 velocity;
	uint _PADDING_0;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
StructuredBuffer<Attribute1> attribBuffer1_RO;
RWStructuredBuffer<Attribute2> attribBuffer2;
StructuredBuffer<Attribute2> attribBuffer2_RO;
RWStructuredBuffer<Attribute3> attribBuffer3;

struct OutputData
{
	float3 position;
	float age;
	float2 size;
	float lifetime;
	uint _PADDING_0;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

#if USE_DYNAMIC_AABB
RWStructuredBuffer<uint3> bounds;
#endif

#if USE_DYNAMIC_AABB
groupshared uint3 boundsLDS[2];

#endif
void VFXBlockPositionCylinderSurface( inout float3 position,float3 Cylinder_position,float3 Cylinder_direction,float Cylinder_radius,float Cylinder_height,inout uint seed)
{
	float u1 = 1.0 * RAND - 0.5;
	float u2 = UNITY_TWO_PI * RAND;
	position = VFXPositionOnCylinderSurface(Cylinder,u1,u2);
}

void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockSizeRandomSquare( inout float2 size,float MinSize,float MaxSize,inout uint seed)
{
	float s = lerp(MinSize,MaxSize,RAND);
	size = float2(s,s);
}

void VFXBlockApplyScaleRatio( inout float2 size,float Ratio)
{
	size *= float2(1.0,Ratio);
}

void VFXBlockSetForceConstant( inout float3 velocity,float3 Force,float deltaTime)
{
	velocity += Force * deltaTime;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		
		uint local_seed = (uint)0;
		
		
		local_seed = WangHash((id.x + spawnIndex) ^ initUniform9_kVFXSystemSeedOp);
		VFXBlockPositionCylinderSurface( attrib0.position,initUniform0_kVFXTransformPosOp,initUniform1_kVFXTransformDirOp,initUniform2_kVFXValueOp,initUniform3_kVFXValueOp,local_seed);
		VFXBlockSetLifetimeRandom( attrib1.lifetime,initUniform4_kVFXValueOp,initUniform5_kVFXValueOp,local_seed);
		VFXBlockSizeRandomSquare( attrib2.size,initUniform6_kVFXValueOp,initUniform7_kVFXValueOp,local_seed);
		VFXBlockApplyScaleRatio( attrib2.size,initUniform8_kVFXValueOp);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	#if USE_DYNAMIC_AABB
	if (groupId.x == 0)
	{
		boundsLDS[0] = (uint3)0xFFFFFFFF;
		boundsLDS[1] = (uint3)0;
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	#endif
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0[index];
		Attribute1 attrib1 = attribBuffer1_RO[index];
		Attribute2 attrib2 = attribBuffer2_RO[index];
		Attribute3 attrib3 = attribBuffer3[index];
		
		
		VFXBlockSetForceConstant( attrib3.velocity,updateUniform0_kVFXTransformVecOp,updateUniform1_kVFXDeltaTimeOp);
		
		attrib0.position += attrib3.velocity * updateUniform1_kVFXDeltaTimeOp;
		
		attrib0.age += updateUniform1_kVFXDeltaTimeOp;
		if (attrib0.age >= attrib1.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer0[index] = attrib0;
			attribBuffer3[index] = attrib3;
			
			OutputData outputData = (OutputData)0;
			outputData.position = attrib0.position;
			outputData.age = attrib0.age;
			outputData.size = attrib2.size;
			outputData.lifetime = attrib1.lifetime;
			outputBuffer.Append(outputData);
			#if USE_DYNAMIC_AABB
			
			uint3 sortablePos = ConvertFloatToSortableUint(attrib0.position);
			
			InterlockedMin(boundsLDS[0].x,sortablePos.x);
			InterlockedMin(boundsLDS[0].y,sortablePos.y);
			InterlockedMin(boundsLDS[0].z,sortablePos.z);
			
			InterlockedMax(boundsLDS[1].x,sortablePos.x);
			InterlockedMax(boundsLDS[1].y,sortablePos.y);
			InterlockedMax(boundsLDS[1].z,sortablePos.z);
			#endif
		}
	}
	#if USE_DYNAMIC_AABB
	
	GroupMemoryBarrierWithGroupSync();
	
	if (groupId.x == 0)
	{
		InterlockedMin(bounds[0].x,boundsLDS[0].x);
		InterlockedMin(bounds[0].y,boundsLDS[0].y);
		InterlockedMin(bounds[0].z,boundsLDS[0].z);
		
		InterlockedMax(bounds[1].x,boundsLDS[1].x);
		InterlockedMax(bounds[1].y,boundsLDS[1].y);
		InterlockedMax(bounds[1].z,boundsLDS[1].z);
	}
	#endif
}

