#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 200

CBUFFER_START(GlobalInfo)
	float deltaTime;
	float totalTime;
	uint nbMax;
	uint systemSeed;
CBUFFER_END

CBUFFER_START(SpawnInfo)
	uint nbSpawned;
	uint spawnIndex;
CBUFFER_END

CBUFFER_START(initUniforms)
	float3 initUniform0;
	float3 initUniform1;
	float initUniform2;
	float initUniform3;
	float initUniform4;
	float initUniform5;
	float initUniform6;
	float initUniform7;
	float initUniform8;
CBUFFER_END

CBUFFER_START(updateUniforms)
	float3 updateUniform0;
CBUFFER_END

struct Attribute0
{
	float3 position;
	float age;
};

struct Attribute1
{
	float lifetime;
};

struct Attribute2
{
	float2 size;
};

struct Attribute3
{
	float3 velocity;
	uint _PADDING_1;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
StructuredBuffer<Attribute1> attribBuffer1_RO;
RWStructuredBuffer<Attribute2> attribBuffer2;
RWStructuredBuffer<Attribute3> attribBuffer3;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

RWStructuredBuffer<uint3> bounds;

float rand(inout uint seed)
{
	seed = 1664525 * seed + 1013904223;
	return float(seed) / 4294967296.0;
}

void VFXBlockPositionCylinderSurface( inout float3 position,float3 Cylinder_position,float3 Cylinder_direction,float Cylinder_radius,float Cylinder_height,inout uint seed)
{
	float u1 = 1.0 * RAND - 0.5;
	float u2 = UNITY_TWO_PI * RAND;
	position = VFXPositionOnCylinderSurface(Cylinder,u1,u2);
}

void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockSizeRandomSquare( inout float2 size,float MinSize,float MaxSize,inout uint seed)
{
	float s = lerp(MinSize,MaxSize,RAND);
	size = float2(s,s);
}

void VFXBlockApplyScaleRatio( inout float2 size,float Ratio)
{
	size *= float2(1.0,Ratio);
}

void VFXBlockSetForceConstant( inout float3 velocity,float3 Force)
{
	velocity += Force * deltaTime;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		
		uint local_seed = (uint)0;
		
		
		uint seed = (id.x + spawnIndex) ^ systemSeed;
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		local_seed = seed;
		
		VFXBlockPositionCylinderSurface( attrib0.position,initUniform0,initUniform1,initUniform2,initUniform3,local_seed);
		VFXBlockSetLifetimeRandom( attrib1.lifetime,initUniform4,initUniform5,local_seed);
		VFXBlockSizeRandomSquare( attrib2.size,initUniform6,initUniform7,local_seed);
		VFXBlockApplyScaleRatio( attrib2.size,initUniform8);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0[index];
		Attribute1 attrib1 = attribBuffer1_RO[index];
		Attribute3 attrib3 = attribBuffer3[index];
		
		
		VFXBlockSetForceConstant( attrib3.velocity,updateUniform0);
		
		attrib0.position += attrib3.velocity * deltaTime;
		
		attrib0.age += deltaTime;
		if (attrib0.age >= attrib1.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer0[index] = attrib0;
			attribBuffer3[index] = attrib3;
		}
	}
}

