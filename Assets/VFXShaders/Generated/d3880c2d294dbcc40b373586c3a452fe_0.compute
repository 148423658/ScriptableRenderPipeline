#pragma kernel CSVFXInit
#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(initUniforms)
	float3 initUniform2_kVFXCombine3fOp;
	float initUniform0_kVFXValueOp;
	
	float3 initUniform3_kVFXCombine3fOp;
	float initUniform1_kVFXValueOp;
	
	float3 initUniform4_kVFXCombine3fOp;
	float initUniform5_kVFXValueOp;
	
	float initUniform6_kVFXValueOp;
	float initUniform7_kVFXValueOp;
	float initUniform8_kVFXValueOp;
	float initUniform9_kVFXValueOp;
	
	uint initUniform10_kVFXSystemSeedOp;
	uint nbSpawned;
	uint spawnIndex;
	uint initUniforms_PADDING_0;

CBUFFER_END

CBUFFER_START(updateUniforms)
	float4x4 updateUniform2_kVFXTRSToMatrixOp;
	
	float4x4 updateUniform5_kVFXInverseTRSOp;
	
	float3 updateUniform0_kVFXTransformVecOp;
	float updateUniform1_kVFXValueOp;
	
	float updateUniform3_kVFXValueOp;
	float updateUniform4_kVFXValueOp;
	float updateUniform6_kVFXDeltaTimeOp;
	uint nbMax;
	
CBUFFER_END

Texture3D updateSampler0_kVFXValueOpTexture;
SamplerState samplerupdateSampler0_kVFXValueOpTexture;

struct Attribute0
{
	float lifetime;
};

struct Attribute1
{
	float3 velocity;
	float age;
};

struct Attribute2
{
	float3 position;
	uint _PADDING_0;
};

struct Attribute3
{
	float texIndex;
};

struct Attribute4
{
	float2 size;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
StructuredBuffer<Attribute0> attribBuffer0_RO;
RWStructuredBuffer<Attribute1> attribBuffer1;
RWStructuredBuffer<Attribute2> attribBuffer2;
RWStructuredBuffer<Attribute3> attribBuffer3;
StructuredBuffer<Attribute3> attribBuffer3_RO;
RWStructuredBuffer<Attribute4> attribBuffer4;
StructuredBuffer<Attribute4> attribBuffer4_RO;

struct OutputData
{
	float3 velocity;
	float lifetime;
	float3 position;
	float age;
	float2 size;
	float texIndex;
	uint _PADDING_0;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

#if USE_DYNAMIC_AABB
RWStructuredBuffer<uint3> bounds;
#endif

#if USE_DYNAMIC_AABB
groupshared uint3 boundsLDS[2];

#endif
void VFXBlockSetLifetimeRandom( inout float lifetime,float MinLifetime,float MaxLifetime,inout uint seed)
{
	lifetime = max(MinLifetime + RAND * (MaxLifetime-MinLifetime),0.0f);
}

void VFXBlockSetPositionAABox( inout float3 position,float3 aabox_center,float3 aabox_size,inout uint seed)
{
	float3 minCoord = (aabox_size * -0.5f) + aabox_center;
	position = (RAND3 * aabox_size) + minCoord;
}

void VFXBlockVelocityConstant( inout float3 velocity,float3 Velocity)
{
	velocity += Velocity;
}

void VFXBlockSetSubUVRandom( inout float texIndex,float MinIndex,float MaxIndex,inout uint seed)
{
	texIndex = lerp(MinIndex,MaxIndex,RAND);
}

void VFXBlockSizeRandomSquare( inout float2 size,float MinSize,float MaxSize,inout uint seed)
{
	float s = lerp(MinSize,MaxSize,RAND);
	size = float2(s,s);
}

void VFXBlockApplyScaleRatio( inout float2 size,float Ratio)
{
	size *= float2(1.0,Ratio);
}

void VFXBlockSetForceRelative( inout float3 velocity,float3 InfluenceSpeed,float DragCoefficient,float deltaTime)
{
	float3 relativeForce = InfluenceSpeed - velocity;
	velocity += relativeForce * min(1.0f,(DragCoefficient * deltaTime));
}

void VFXBlockVectorFieldRelativeForce( inout float3 velocity,float3 position,VFXSampler3D VectorField,float4x4 Box,float4x4 InvBox,float Intensity,float DragCoefficient,float deltaTime)
{
	float3 vectorFieldCoord = mul(INVERSE(Box), float4(position,1.0f)).xyz;
	float3 value = SampleTexture(VectorField, vectorFieldCoord + 0.5f).xyz * 2.0f - 1.0f;
	value = mul(Box,float4(value,0.0f)).xyz * Intensity;
	float3 relativeForce = value - velocity;
	velocity += relativeForce * min(1.0,(DragCoefficient * deltaTime));
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXInit(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < min(nbSpawned,deadListCount[0]))
	{
		uint index = deadListIn.Consume();
		
		Attribute0 attrib0 = (Attribute0)0;
		Attribute1 attrib1 = (Attribute1)0;
		Attribute2 attrib2 = (Attribute2)0;
		Attribute3 attrib3 = (Attribute3)0;
		Attribute4 attrib4 = (Attribute4)0;
		
		uint local_seed = (uint)0;
		
		
		local_seed = WangHash((id.x + spawnIndex) ^ initUniform10_kVFXSystemSeedOp);
		VFXBlockSetLifetimeRandom( attrib0.lifetime,initUniform0_kVFXValueOp,initUniform1_kVFXValueOp,local_seed);
		VFXBlockSetPositionAABox( attrib2.position,initUniform2_kVFXCombine3fOp,initUniform3_kVFXCombine3fOp,local_seed);
		VFXBlockVelocityConstant( attrib1.velocity,initUniform4_kVFXCombine3fOp);
		VFXBlockSetSubUVRandom( attrib3.texIndex,initUniform5_kVFXValueOp,initUniform6_kVFXValueOp,local_seed);
		VFXBlockSizeRandomSquare( attrib4.size,initUniform7_kVFXValueOp,initUniform8_kVFXValueOp,local_seed);
		VFXBlockApplyScaleRatio( attrib4.size,initUniform9_kVFXValueOp);
		
		attribBuffer0[index] = attrib0;
		attribBuffer1[index] = attrib1;
		attribBuffer2[index] = attrib2;
		attribBuffer3[index] = attrib3;
		attribBuffer4[index] = attrib4;
		
		flags[index] = 1;
	}
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	#if USE_DYNAMIC_AABB
	if (groupId.x == 0)
	{
		boundsLDS[0] = (uint3)0xFFFFFFFF;
		boundsLDS[1] = (uint3)0;
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	#endif
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0_RO[index];
		Attribute1 attrib1 = attribBuffer1[index];
		Attribute2 attrib2 = attribBuffer2[index];
		Attribute3 attrib3 = attribBuffer3_RO[index];
		Attribute4 attrib4 = attribBuffer4_RO[index];
		
		VFXSampler3D updateSampler0_kVFXValueOp = InitSampler(updateSampler0_kVFXValueOpTexture,samplerupdateSampler0_kVFXValueOpTexture);
		
		VFXBlockSetForceRelative( attrib1.velocity,updateUniform0_kVFXTransformVecOp,updateUniform1_kVFXValueOp,updateUniform6_kVFXDeltaTimeOp);
		VFXBlockVectorFieldRelativeForce( attrib1.velocity,attrib2.position,updateSampler0_kVFXValueOp,updateUniform2_kVFXTRSToMatrixOp,updateUniform5_kVFXInverseTRSOp,updateUniform3_kVFXValueOp,updateUniform4_kVFXValueOp,updateUniform6_kVFXDeltaTimeOp);
		
		attrib2.position += attrib1.velocity * updateUniform6_kVFXDeltaTimeOp;
		
		attrib1.age += updateUniform6_kVFXDeltaTimeOp;
		if (attrib1.age >= attrib0.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer1[index] = attrib1;
			attribBuffer2[index] = attrib2;
			
			OutputData outputData = (OutputData)0;
			outputData.velocity = attrib1.velocity;
			outputData.lifetime = attrib0.lifetime;
			outputData.position = attrib2.position;
			outputData.age = attrib1.age;
			outputData.size = attrib4.size;
			outputData.texIndex = attrib3.texIndex;
			outputBuffer.Append(outputData);
			#if USE_DYNAMIC_AABB
			
			uint3 sortablePos = ConvertFloatToSortableUint(attrib2.position);
			
			InterlockedMin(boundsLDS[0].x,sortablePos.x);
			InterlockedMin(boundsLDS[0].y,sortablePos.y);
			InterlockedMin(boundsLDS[0].z,sortablePos.z);
			
			InterlockedMax(boundsLDS[1].x,sortablePos.x);
			InterlockedMax(boundsLDS[1].y,sortablePos.y);
			InterlockedMax(boundsLDS[1].z,sortablePos.z);
			#endif
		}
	}
	#if USE_DYNAMIC_AABB
	
	GroupMemoryBarrierWithGroupSync();
	
	if (groupId.x == 0)
	{
		InterlockedMin(bounds[0].x,boundsLDS[0].x);
		InterlockedMin(bounds[0].y,boundsLDS[0].y);
		InterlockedMin(bounds[0].z,boundsLDS[0].z);
		
		InterlockedMax(bounds[1].x,boundsLDS[1].x);
		InterlockedMax(bounds[1].y,boundsLDS[1].y);
		InterlockedMax(bounds[1].z,boundsLDS[1].z);
	}
	#endif
}

