#pragma kernel CSVFXUpdate

#include "HLSLSupport.cginc"
#include "../VFXCommon.cginc"

#define NB_THREADS_PER_GROUP 256

CBUFFER_START(GlobalInfo)
	float deltaTime;
	float totalTime;
	uint nbMax;
CBUFFER_END

CBUFFER_START(updateUniforms)
	float3 updateUniform0;
CBUFFER_END

struct Attribute0
{
	float3 velocity;
	uint _PADDING_0;
};

struct Attribute1
{
	float3 position;
	float age;
};

struct Attribute2
{
	float lifetime;
};

RWStructuredBuffer<Attribute0> attribBuffer0;
RWStructuredBuffer<Attribute1> attribBuffer1;
RWStructuredBuffer<Attribute2> attribBuffer2;
StructuredBuffer<Attribute2> attribBuffer2_RO;

struct OutputData
{
	float3 position;
	float age;
	float lifetime;
	uint3 _PADDING_0;
};

AppendStructuredBuffer<OutputData> outputBuffer;

RWStructuredBuffer<int> flags;
ConsumeStructuredBuffer<uint> deadListIn;
AppendStructuredBuffer<uint> deadListOut;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB

RWStructuredBuffer<uint3> bounds;

void VFXBlockSetForceConstant( inout float3 velocity,float3 Force)
{
	velocity += Force * deltaTime;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSVFXUpdate(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GroupThreadID)
{
	if (id.x < nbMax && flags[id.x] == 1)
	{
		uint index = id.x;
		bool kill = false;
		
		Attribute0 attrib0 = attribBuffer0[index];
		Attribute1 attrib1 = attribBuffer1[index];
		Attribute2 attrib2 = attribBuffer2_RO[index];
		
		
		VFXBlockSetForceConstant( attrib0.velocity,updateUniform0);
		
		attrib1.position += attrib0.velocity * deltaTime;
		
		attrib1.age += deltaTime;
		if (attrib1.age >= attrib2.lifetime)
			kill = true;
		
		if (kill)
		{
			flags[index] = 0;
			deadListOut.Append(index);
		}
		else
		{
			attribBuffer0[index] = attrib0;
			attribBuffer1[index] = attrib1;
			
			OutputData outputData = (OutputData)0;
			outputData.position = attrib1.position;
			outputData.age = attrib1.age;
			outputData.lifetime = attrib2.lifetime;
			outputBuffer.Append(outputData);
		}
	}
}

