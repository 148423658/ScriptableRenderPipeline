#pragma kernel CSMain
${VFXGlobalInclude}
${VFXGlobalDeclaration}

RWByteAddressBuffer attributeBuffer;

CBUFFER_START(initParams)
    uint nbSpawned;		// Numbers of particle spawned
    uint spawnIndex;	// Index of the first particle spawned
	uint systemSeed;
CBUFFER_END

#if VFX_USE_ALIVE_CURRENT 
ConsumeStructuredBuffer<uint> deadListIn;
Buffer<uint> deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB
#endif

${VFXGeneratedBlockFunction}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	uint maxThreadId = nbSpawned;
#if VFX_USE_ALIVE_CURRENT
	maxThreadId = min(maxThreadId,deadListCount[0]);
#endif

    if (id.x < maxThreadId)
    {
		uint particleIndex = id.x + spawnIndex;
        ${VFXLoadAttributes}
				
#if VFX_USE_PARTICLEID_CURRENT
		particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
		seed = WangHash(particleIndex ^ systemSeed);
#endif
#if VFX_USE_PHASE_CURRENT
#if !VFX_USE_SEED_CURRENT // TODO Quite bad
		uint seed = WangHash(particleIndex ^ systemSeed);
#endif
		phase = randLcg(seed);
#endif
		
        ${VFXProcessBlocks}

#if VFX_USE_ALIVE_CURRENT		
        if (alive)
        {	
            uint index = deadListIn.Consume();
            ${VFXStoreAttributes}
        }
#else
		uint index = particleIndex;
		${VFXStoreAttributes}
#endif		
    }
}