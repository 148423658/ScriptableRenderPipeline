#if !(defined(VFX_VARYING_STRUCT) && defined(VFX_VARYING_POSITIONWS))
#error VFX_VARYING_STRUCT, VFX_VARYING_POSITIONWS and VFX_VARYING_UV must be defined.
#endif

#pragma vertex vert

VFX_VARYING_STRUCT vert(uint id : SV_VertexID, uint instanceID : SV_InstanceID)
{
	uint index = (id >> 2) + instanceID * 2048;
	VFX_VARYING_STRUCT o = (VFX_VARYING_STRUCT)0;
	o.VFX_VARYING_POSITIONWS = -1;
	if (index < asuint(nbMax))
	{
		${VFXLoadAttributes:{alive}}
		if (alive)
		{
			${VFXLoadAttributes:{(?!(alive))(\b\w)}}
			${VFXProcessBlocks}
			
			o.VFX_VARYING_UV.x = float(id & 1);
			o.VFX_VARYING_UV.y = float((id & 2) >> 1);
			
			float2 offsets = size.xy * (o.VFX_VARYING_UV - pivot.xy - 0.5f);
			float3x3 rot = GetRotationMatrix(front,radians(angle));
			
			position += mul(rot,side * offsets.x);
			position += mul(rot,up * offsets.y);
			position -= front * pivot.z;

			o.VFX_VARYING_POSITIONWS = mul(VFXModelViewProj(), float4(position,1.0f));

			${VFXVertexCommonProcess}
			
			#if USE_FLIPBOOK
			${VFXLoadParameter:{flipBookSize}}
			${VFXLoadParameter:{invFlipBookSize}}
			
			float frameBlend = frac(texIndex);
			float frameIndex = texIndex - frameBlend;
							
			#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_FRAMEBLEND)
			o.VFX_VARYING_FRAMEBLEND = frameBlend;
			o.VFX_VARYING_UV.zw = GetSubUV(frameIndex + 1,o.VFX_VARYING_UV.xy,flipBookSize,invFlipBookSize);					
			#endif
			o.VFX_VARYING_UV.xy = GetSubUV(frameIndex,o.VFX_VARYING_UV.xy,flipBookSize,invFlipBookSize);
			#endif
			
			${VFXVertexAdditionalProcess}
		}
	}
	return o;
}

float4 VFXGetTextureColor(VFX_VARYING_STRUCT i)
{
	float4 texColor = texture_texture.Sample(samplertexture_texture,i.VFX_VARYING_UV.xy);			
	#if USE_FLIPBOOK_INTERPOLATION
	float4 texColor2 = texture_texture.Sample(samplertexture_texture,i.VFX_VARYING_UV.zw);	
	texColor = lerp(texColor,texColor2,i.VFX_VARYING_FRAMEBLEND);
	#endif
	return texColor;
}

${VFXFragmentCommonFunctions}
