#pragma vertex vert
VFX_VARYING_PS_INPUTS vert(uint id : SV_VertexID, uint instanceID : SV_InstanceID)
{
	uint index = (id >> 2) + instanceID * 2048;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;
	if (index < asuint(nbMax))
	{
		#if VFX_HAS_INDIRECT_DRAW
		index = indirectBuffer[index];
		#endif
		${VFXLoadAttributes:{alive}}
		if (alive)
		{
			${VFXLoadAttributes:{(?!(alive))(\b\w)}}
			${VFXProcessBlocks}
			
			if (!alive)
				return o;
			
			o.VFX_VARYING_UV.x = float(id & 1);
			o.VFX_VARYING_UV.y = float((id & 2) >> 1);
			
			float3 vPos = position;
			vPos += TransformInElementSpace(float3(o.VFX_VARYING_UV.xy - 0.5f,0.0f),side,up,front,angle,pivot,size);

			o.VFX_VARYING_POSCS = TransformPositionVFXToClip(vPos);

			${VFXVertexCommonProcess}
			
			#if USE_FLIPBOOK
			${VFXLoadParameter:{flipBookSize}}
			${VFXLoadParameter:{invFlipBookSize}}
			
			float frameBlend = frac(texIndex);
			float frameIndex = texIndex - frameBlend;
							
			#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_FRAMEBLEND)
			o.VFX_VARYING_FRAMEBLEND = frameBlend;
			o.VFX_VARYING_UV.zw = GetSubUV(frameIndex + 1,o.VFX_VARYING_UV.xy,flipBookSize,invFlipBookSize);					
			#endif
			o.VFX_VARYING_UV.xy = GetSubUV(frameIndex,o.VFX_VARYING_UV.xy,flipBookSize,invFlipBookSize);
			#endif
			
			${VFXVertexAdditionalProcess}
		}
	}
	return o;
}
