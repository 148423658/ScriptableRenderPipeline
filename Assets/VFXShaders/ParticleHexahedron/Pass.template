#if !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))
#error VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS must be defined.
#endif

#pragma vertex vert
VFX_VARYING_PS_INPUTS vert(uint id : SV_VertexID, uint instanceID : SV_InstanceID)
{
	uint index = (id >> 3) + instanceID * 1024;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;
	if (index < asuint(nbMax))
	{
		#if VFX_HAS_INDIRECT_DRAW
		index = indirectBuffer[index];
		#endif
		${VFXLoadAttributes:{alive}}
		if (alive)
		{
			${VFXLoadAttributes:{(?!(alive))(\b\w)}}
			${VFXProcessBlocks}
			
			if (!alive)
				return o;
			
			float3 offsets = (float3)0;
			offsets.x = float(id & 1);
			offsets.y = float((id & 3) >> 1);
			offsets.z = float((id & 7) >> 2);
			offsets = offsets * 2.0f - 1.0f;
			
			float3 vPos = position;
			float3x3 rot = GetRotationMatrix(front,radians(angle));
			vPos += TransformInElementSpace(offsets,side,up,front,rot,pivot,float3(size,min(size.x,size.y)));

#ifdef VFX_VARYING_OFFSETS
			o.VFX_VARYING_OFFSETS = offsets;
#endif
#if defined(VFX_VARYING_ROTX) && defined(VFX_VARYING_ROTY)
			rot = mul(rot,transpose(float3x3(side,up,front)));
			o.VFX_VARYING_ROTX = rot[0];
			o.VFX_VARYING_ROTY = rot[1];
#endif
			o.VFX_VARYING_POSCS = TransformPositionVFXToClip(vPos);

			${VFXVertexCommonProcess}			
			${VFXVertexAdditionalProcess}
		}
	}
	return o;
}

${VFXFragmentCommonFunctions}

float3 GetCubeLocalNormal(VFX_VARYING_PS_INPUTS i)
{
	//float3 s = i.offsets > 0 ? 1.0f : -1.0f;
	//return s * (step(1.0f,s * i.offsets + 1e-5));
	return (int3(i.offsets * 1.00001f)); // cast uses round_z
}

float3 TransformNormalTS(float3 faceNormal,float3 normal)
{
	float3x3 tbn = float3x3(faceNormal.zyx,faceNormal.xzy,faceNormal.xyz);
	return mul(tbn,normal);
}

float3 TransformNormalWS(VFX_VARYING_PS_INPUTS i,float3 normal)
{
#if defined(VFX_VARYING_ROTX) && defined(VFX_VARYING_ROTY)
	float3x3 rot = float3x3(i.rotX,i.rotY,cross(i.rotY,i.rotX));
	return mul(rot,normal);
#else
	return normal;
#endif
}

float2 GetCubeUV(VFX_VARYING_PS_INPUTS i) 
{
	float3 aOffsets = abs(i.offsets);
	float2 uv;
	if (aOffsets.x > 1.0f - 1.e-5)
		uv = i.offsets.yz;
	else if (aOffsets.y > 1.0f - 1.e-5)
		uv = i.offsets.xz;
	else
		uv = i.offsets.xy;
	return uv * 0.5f + 0.5f;
}
