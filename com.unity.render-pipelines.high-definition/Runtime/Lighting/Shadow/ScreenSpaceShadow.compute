// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DeferredContactShadow                DEFERRED_CONTACT_SHADOW_GENERIC=DeferredContactShadow
#pragma kernel DeferredContactShadowMSAA            DEFERRED_CONTACT_SHADOW_GENERIC=DeferredContactShadowMSAA         ENABLE_MSAA
//seongdae;vxsm
#pragma kernel DeferredVxShadowNearest              DEFERRED_VX_SHADOW_GENERIC=DeferredVxShadowNearest                NEAREST_SAMPLE
#pragma kernel DeferredVxShadowBilinear             DEFERRED_VX_SHADOW_GENERIC=DeferredVxShadowBilinear               BILINEAR_SAMPLE
#pragma kernel DeferredVxShadowTrilinear            DEFERRED_VX_SHADOW_GENERIC=DeferredVxShadowTrilinear              TRILINEAR_SAMPLE
#pragma kernel DeferredVxShadowNearestMSAA          DEFERRED_VX_SHADOW_GENERIC=DeferredVxShadowNearestMSAA            NEAREST_SAMPLE   ENABLE_MSAA
#pragma kernel DeferredVxShadowBilinearMSAA         DEFERRED_VX_SHADOW_GENERIC=DeferredVxShadowBilinearMSAA           BILINEAR_SAMPLE  ENABLE_MSAA
#pragma kernel DeferredVxShadowTrilinearMSAA        DEFERRED_VX_SHADOW_GENERIC=DeferredVxShadowTrilinearMSAA          TRILINEAR_SAMPLE ENABLE_MSAA
//seongdae;vxsm

#ifdef SHADER_API_PSSL
#   pragma argument( scheduler=minpressure ) // instruct the shader compiler to prefer minimizing vgpr usage
#endif

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.voxelized-shadows/ShaderLibrary/Common.hlsl" //seongdae;vxsm

#define USE_FPTL_LIGHTLIST // Use light tiles for contact shadows
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"

// We perform scalarization only for forward rendering as for deferred loads will already be scalar since tiles will match waves and therefore all threads will read from the same tile. 
// More info on scalarization: https://flashypixels.wordpress.com/2018/11/10/intro-to-gpu-scalarization-part-2-scalarize-all-the-lights/
#define SCALARIZE_LIGHT_LOOP (defined(SUPPORTS_WAVE_INTRINSICS) && !defined(LIGHTLOOP_DISABLE_TILE_AND_CLUSTER) && SHADERPASS == SHADERPASS_FORWARD)

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

// #pragma enable_d3d11_debug_symbols

#ifdef ENABLE_MSAA
    TEXTURE2D_X(_CameraDepthValues);
#endif

RW_TEXTURE2D_X(uint, _DeferredShadowTextureUAV);

CBUFFER_START(DeferredShadowParameters)
float4  _ContactShadowParamsParameters;
float4  _ContactShadowParamsParameters2;
int     _SampleCount;
CBUFFER_END

#define _ContactShadowLength                _ContactShadowParamsParameters.x
#define _ContactShadowDistanceScaleFactor   _ContactShadowParamsParameters.y
#define _ContactShadowFadeEnd               _ContactShadowParamsParameters.z
#define _ContactShadowFadeOneOverRange      _ContactShadowParamsParameters.w
#define _ContactShadowOpacity               _ContactShadowParamsParameters2.x
#define _RenderTargetHeight                 _ContactShadowParamsParameters2.y

#define DEFERRED_SHADOW_TILE_SIZE 16



float SampleDepth(float2 UV, bool HalfRes)
{
    float2 pixelCoord = UV.xy * _ScreenSize.xy;

    if (HalfRes)
    {
        pixelCoord.x *= 0.5f;
        pixelCoord.y = pixelCoord.y * 0.5f + _RenderTargetHeight;
    }
    
    return LoadCameraDepth(pixelCoord);
}


bool ScreenSpaceShadowRayCast(float3 positionWS, float3 rayDirWS, float rayLength, uint2 positionSS, out float fade)
{

    // Dither pattern is shifted by 0.5 because we want to jitter the ray starting position backward and forward (so we need values between -0.5 and 0.5)
    float ditherBias = 0.5f;
    // With a mod of 8 and taa we'd get no visible flickering, but the stitching pattern is more noticeable. With %16 we do get a bit of visible flickering, but a smoother gradient.
    // If TAA is off, the noise pattern does not vary over time.
    uint taaEnabled = _TaaFrameInfo.w;
    float dither = InterleavedGradientNoise(positionSS, (_FrameCount % 16u) * taaEnabled) - ditherBias;

    float3 rayStartWS = positionWS;
    float3 rayEndWS = rayStartWS + rayDirWS * rayLength;

    float4 rayStartCS = TransformWorldToHClip(rayStartWS);
    float4 rayEndCS = TransformWorldToHClip(rayEndWS);

    // Here we compute a ray perpendicular to view space. This is the ray we use to compute the threshold for rejecting samples.
    // This is done this way so that the threshold is less dependent of ray slope.
    float4 rayOrthoViewSpace = rayStartCS + float4(GetViewToHClipMatrix()[0][2], GetViewToHClipMatrix()[1][2], GetViewToHClipMatrix()[2][2], GetViewToHClipMatrix()[3][2]) * rayLength;
    rayOrthoViewSpace = rayOrthoViewSpace / rayOrthoViewSpace.w;

    rayStartCS.xyz = rayStartCS.xyz / rayStartCS.w;
    rayEndCS.xyz = rayEndCS.xyz / rayEndCS.w;

    // Pixel to light ray in clip space.
    float3 rayDirCS = rayEndCS.xyz - rayStartCS.xyz;

    float step = 1.0f / _SampleCount;
    float compareThreshold = abs(rayOrthoViewSpace.z - rayStartCS.z) * max(0.07f, step);

    float occluded = 0.0f;

    // From this point on, all the marching will be done in UV space + Z 
    float2 startUV = rayStartCS.xy * 0.5f + 0.5f;
    startUV.y = 1.0f - startUV.y;
    float3 rayStart = float3(startUV, rayStartCS.z);
    float3 rayDir = float3(rayDirCS.x * 0.5f, -rayDirCS.y * 0.5f, rayDirCS.z);

    float t = step * dither + step;

    bool tracingHalfRes = true;
    for (int i = 0; i < _SampleCount; i++)
    {
        float3 sampleAlongRay = rayStart + t * rayDir;


        if (any(sampleAlongRay.xy < 0) || any(sampleAlongRay.xy > 1))
        {
            break;
        }

#ifdef ENABLE_MSAA
        // Depth buffer depth for this sample
        float sampleDepth = SAMPLE_TEXTURE2D_X_LOD(_CameraDepthValues, s_point_clamp_sampler, sampleAlongRay.xy, 0.0f).y;
#else
        // Depth buffer depth for this sample
        float sampleDepth = SampleDepth(saturate(sampleAlongRay.xy), tracingHalfRes);
#endif

        float depthDiff = sampleDepth - sampleAlongRay.z;

        if (depthDiff > 0.0f && depthDiff < compareThreshold)
        {
            if (tracingHalfRes)
            {
                // Move permanentely to full res. There is a good chance we've hit something, so next full res sample will find the intersection.
                // If not, then allowing each thread to go back and forth between half and full was not beneficial to perf.
                tracingHalfRes = false;
                i--;
                continue;
            }
            else
            {
                occluded = 1.0f;
                break;
            }
        }

        t += step;
    }

    // Off screen masking
    // We remove the occlusion if the ray is occluded and only if direction steps out of the screen
    float2 vignette = max(6.0f * abs(rayStartCS.xy + rayDirCS.xy * t) - 5.0f, 0.0f);
    fade = occluded;
    fade *= saturate(1.0f - dot(vignette, vignette));

    return occluded;
}

bool ComputeContactShadow(PositionInputs posInput, float3 direction, inout float globalFade)
{
    bool    occluded = false;
    float   fade;
    
    if (_ContactShadowLength > 0.0f)
    {
        //Here LightDirection is not the light direction but the light position
        float rayLength = _ContactShadowLength * max(0.5, posInput.linearDepth * _ContactShadowDistanceScaleFactor);
        occluded = ScreenSpaceShadowRayCast(posInput.positionWS, direction, rayLength, posInput.positionSS, fade);
        fade *= saturate((_ContactShadowFadeEnd - posInput.linearDepth) * _ContactShadowFadeOneOverRange);

        globalFade = max(globalFade, fade);
    }

    return occluded;
}

[numthreads(DEFERRED_SHADOW_TILE_SIZE, DEFERRED_SHADOW_TILE_SIZE, 1)]
void DEFERRED_CONTACT_SHADOW_GENERIC(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);

    uint2 pixelCoord = groupId * DEFERRED_SHADOW_TILE_SIZE + groupThreadId;
    uint2 tileCoord = groupId;

#ifdef ENABLE_MSAA
    float depth = LOAD_TEXTURE2D_X(_CameraDepthValues, pixelCoord.xy).z;
#else
    float depth = LoadCameraDepth(pixelCoord.xy);
#endif

    PositionInputs posInput = GetPositionInput_Stereo(pixelCoord.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, tileCoord, unity_StereoEyeIndex);

    // discard the shadow if we're on the sky or outside of the contact shadow range
    if (depth == UNITY_RAW_FAR_CLIP_VALUE || posInput.linearDepth - _ContactShadowFadeEnd > 1)
    {
        _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = 0;
        return;
    }

    // store the 24 bit contact shadow mask mask (1: pixel is in contact shadow, 0: pixel is not shadowed)
    uint    contactShadowMask = 0;
    // the fade is combined for all lights and stored in the 8 remaining bits of the R32 target
    float   globalFade = 0.0;

    uint featureFlags = ~0;

    // Do the contact shadow for the directional light
    if (featureFlags & LIGHTFEATUREFLAGS_DIRECTIONAL)
    {
        if (_DirectionalShadowIndex >= 0)
        {
            DirectionalLightData light = _DirectionalLightDatas[_DirectionalShadowIndex];
            
            if (light.contactShadowMask != 0)
            {
                // We store the inverse of the contact shadow:
                bool occluded = ComputeContactShadow(posInput, -light.forward, globalFade);
                
                // light.contactShadowMask contains one bit at the position of the contact shadow index that will
                // be tested in the lightloop, so it insert 1 at the index of the contact shadow if there is a contact shadow
                // we take full bits at one multiplied by contact shadow and filter the bit at the contact shadow index.
                contactShadowMask |= light.contactShadowMask * occluded;
            }
        }
    }

    // iterate over all point/spot lights
    if (featureFlags & LIGHTFEATUREFLAGS_PUNCTUAL)
    {
        uint lightCount, lightStart;

#ifndef LIGHTLOOP_DISABLE_TILE_AND_CLUSTER
        GetCountAndStart(posInput, LIGHTCATEGORY_PUNCTUAL, lightStart, lightCount);
#else   // LIGHTLOOP_DISABLE_TILE_AND_CLUSTER
        lightCount = _PunctualLightCount;
        lightStart = 0;
#endif
        uint startFirstLane = 0;
        bool fastPath;

        fastPath = IsFastPath(lightStart, startFirstLane);
        if (fastPath)
        {
            lightStart = startFirstLane;
        }

        for (uint lightListOffset = 0; lightListOffset < lightCount; lightListOffset++)
        {
            uint v_lightIdx = FetchIndex(lightStart, lightListOffset);
            uint s_lightIdx = ScalarizeElementIndex(v_lightIdx, fastPath);
            if (s_lightIdx == -1)
                break;

            LightData light = FetchLight(s_lightIdx); // Scalar load

            if (light.contactShadowMask == 0)
                continue;

            // Compute light ray direction:
            float3 direction = normalize(light.positionRWS.xyz - posInput.positionWS);

            bool occluded = ComputeContactShadow(posInput, direction, globalFade);

            // light.contactShadowMask contains one bit at the position of the contact shadow index that will
            // be tested in the lightloop, so it insert 1 at the index of the contact shadow if there is a contact shadow
            // we take full bits at one multiplied by contact shadow and filter the bit at the contact shadow index.
            contactShadowMask |= light.contactShadowMask * occluded;
        }
    }

    _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = PackContactShadowData(globalFade * _ContactShadowOpacity, contactShadowMask);
}

//seongdae;vxsm
[numthreads(DEFERRED_SHADOW_TILE_SIZE, DEFERRED_SHADOW_TILE_SIZE, 1)]
void DEFERRED_VX_SHADOW_GENERIC(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    uint2 pixelCoord = groupId * DEFERRED_SHADOW_TILE_SIZE + groupThreadId;
    pixelCoord.x = pixelCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);
    uint2 tileCoord = groupId;

#ifdef ENABLE_MSAA
    float depth = LOAD_TEXTURE2D_X(_CameraDepthValues, pixelCoord.xy).z;
#else
    float depth = LoadCameraDepth(pixelCoord.xy);
#endif

    if (depth == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    PositionInputs posInput = GetPositionInput_Stereo(pixelCoord.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, tileCoord, unity_StereoEyeIndex);
    float3 positionWS = posInput.positionWS + _WorldSpaceCameraPos;

    NormalData normalData;
    DecodeFromNormalBuffer(posInput.positionSS, normalData);

    uint begin = 0;

    float volumeScale = asfloat(_VxShadowMapsBuffer[begin + 1]);
    uint dagScale = _VxShadowMapsBuffer[begin + 2];
    float4x4 worldToShadowMatrix =
    {
        asfloat(_VxShadowMapsBuffer[begin +  3]),
        asfloat(_VxShadowMapsBuffer[begin +  4]),
        asfloat(_VxShadowMapsBuffer[begin +  5]),
        asfloat(_VxShadowMapsBuffer[begin +  6]),

        asfloat(_VxShadowMapsBuffer[begin +  7]),
        asfloat(_VxShadowMapsBuffer[begin +  8]),
        asfloat(_VxShadowMapsBuffer[begin +  9]),
        asfloat(_VxShadowMapsBuffer[begin + 10]),

        asfloat(_VxShadowMapsBuffer[begin + 11]),
        asfloat(_VxShadowMapsBuffer[begin + 12]),
        asfloat(_VxShadowMapsBuffer[begin + 13]),
        asfloat(_VxShadowMapsBuffer[begin + 14]),

        0.0, 0.0, 0.0, 1.0,
    };

    uint voxelResolution = 1 << dagScale;
    float normalBias = 2.0 * (volumeScale / voxelResolution);

    positionWS += (normalData.normalWS * normalBias);

    float3 posNDC = mul(worldToShadowMatrix, float4(positionWS, 1.0)).xyz;
    float3 posP = posNDC * (float)voxelResolution;
    float3 posF = floor(posP);
    float3 lerpWeight = posP - posF;

    uint3 posQ = (uint3)posP;

    if (any(posQ >= (voxelResolution.xxx - 1)))
    {
        _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = 0.0;
        return;
    }

    float attenuation = 1.0;

#if NEAREST_SAMPLE
    uint4 result;
    TraverseVxShadowMapPosQ(begin, OFFSET_DIR, posQ, result);

    if (result.w == 0)
    {
        attenuation = result.y ? 0.0 : 1.0;
        _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = attenuation;
        return;
    }

    attenuation = TraverseNearestSampleVxShadowMap(begin, OFFSET_DIR, posQ, result);
#elif BILINEAR_SAMPLE
    uint4 results[4];
    TraverseVxShadowMapPosQ2x2(begin, OFFSET_DIR, posQ, results);

    if (results[0].w == 0 && results[1].w == 0 && results[2].w == 0 && results[3].w == 0)
    {
        float4 attenuation4 = float4(
            results[0].y ? 0.0 : 1.0,
            results[1].y ? 0.0 : 1.0,
            results[2].y ? 0.0 : 1.0,
            results[3].y ? 0.0 : 1.0);
        attenuation4.xy = lerp(attenuation4.xz, attenuation4.yw, lerpWeight.x);

        attenuation = lerp(attenuation4.x, attenuation4.y, lerpWeight.y);
        _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = attenuation;
        return;
    }

    attenuation = TraverseBilinearSampleVxShadowMap(begin, OFFSET_DIR, posQ, results, lerpWeight.xy);
#elif TRILINEAR_SAMPLE
    uint4 results[8];
    TraverseVxShadowMapPosQ2x2x2(begin, OFFSET_DIR, posQ, results);

    if (results[0].w == 0 && results[1].w == 0 && results[2].w == 0 && results[3].w == 0 &&
        results[4].w == 0 && results[5].w == 0 && results[6].w == 0 && results[7].w == 0)
    {
        float4 attenuation4_0 = float4(
            results[0].y ? 0.0 : 1.0,
            results[2].y ? 0.0 : 1.0,
            results[4].y ? 0.0 : 1.0,
            results[6].y ? 0.0 : 1.0);
        float4 attenuation4_1 = float4(
            results[1].y ? 0.0 : 1.0,
            results[3].y ? 0.0 : 1.0,
            results[5].y ? 0.0 : 1.0,
            results[7].y ? 0.0 : 1.0);

        attenuation4_0 = lerp(attenuation4_0, attenuation4_1, lerpWeight.x);
        attenuation4_0.xy = lerp(attenuation4_0.xz, attenuation4_0.yw, lerpWeight.y);

        attenuation = lerp(attenuation4_0.x, attenuation4_0.y, lerpWeight.z);
        _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = attenuation;
        return;
    }

    attenuation = TravereTrilinearSampleVxShadowMap(begin, OFFSET_DIR, posQ, results, lerpWeight);
#endif

    _DeferredShadowTextureUAV[COORD_TEXTURE2D_X(pixelCoord)] = 1.0 - attenuation;
}
//seongdae;vxsm
