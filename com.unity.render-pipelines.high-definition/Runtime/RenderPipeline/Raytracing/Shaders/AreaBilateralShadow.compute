/*
** Adapted from "Combining Analytic Direct Illumination and Stochastic", by Heitz et al.
** https://eheitzresearch.wordpress.com/705-2/
*/

#pragma kernel AreaShadowEstimateNoise
#pragma kernel AreaShadowDenoise

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"

// Tile size of this compute
#define AREA_BILLATERAL_TILE_SIZE 8

// Input/intermediate integration texture (containing Sn, Un, U, E)
Texture2D<float4>       _DenoiseInputTexture;
RWTexture2D<float4>     _DenoiseOutputTextureRW;

// ScreenSpace buffers
Texture2D<float>        _DepthTexture;

// Filter parameters
int                     _DenoisePass;
int                     _DenoiseRadius;

// Output texture data
int                     _RaytracingShadowSlot;
RWTexture2DArray<float> _AreaShadowTextureRW;

// Bilateral filter parameters
static const float NORMAL_WEIGHT   = 1.0f;
static const float PLANE_WEIGHT    = 1.0f;
static const float DEPTH_WEIGHT    = 1.0f;
static const float ANALYTIC_WEIGHT = 1.0f;

// Couple helper functions
float sqr(float value)
{
    return value * value;
}
float gaussian(float radius, float sigma)
{
    return exp(-sqr(radius / sigma));
}

/****************************** Noise Estimation Kernel ******************************/

// Sample the signal used for the noise estimation at coordSS
float TapRatio(uint2 coordSS)
{
    const float Sn = _DenoiseInputTexture[coordSS].x;
    const float Un = _DenoiseInputTexture[coordSS].y;

    return (Un > 0.0f) ? (Sn / Un) : 1.0f;
}

// Estimate desired radius from the second derivative of the signal
float EstimateNoise(uint2 coordSS, float2 axis)
{
    // Radius is supposed to be always >= 1
    const int NOISE_ESTIMATION_RADIUS = min(_DenoiseRadius, 10);
    float v2 = TapRatio(coordSS - NOISE_ESTIMATION_RADIUS * axis);
    float v1 = TapRatio(coordSS - (NOISE_ESTIMATION_RADIUS - 1) * axis);

    float d2mag = 0.0;
    uint n = 0;

    // The first two points are accounted for above
    for (int r = -(NOISE_ESTIMATION_RADIUS - 2); r <= NOISE_ESTIMATION_RADIUS; ++r, ++n)
    {
        float v0 = TapRatio(coordSS + r * axis);

        // Second derivative
        const float d2 = v2 - 2.0f * v1 + v0;

        d2mag += abs(d2);

        // Shift weights in the window
        v2 = v1; v1 = v0;
    }

    return saturate(sqrt(d2mag / n));
}

// Estimate noise to drive denoising kernel radius
[numthreads(AREA_BILLATERAL_TILE_SIZE, AREA_BILLATERAL_TILE_SIZE, 1)]
void AreaShadowEstimateNoise(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * AREA_BILLATERAL_TILE_SIZE + groupThreadId;
    centerCoord.x = centerCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);

    // Quasi-random angular offset, to break pattern
    float angle = ScramblingValue(centerCoord.x, centerCoord.y) * (PI / 256);

    float maxNoise = 0.0f;
    float2 axis;

    static const int N = 4;
    for (float t = 0; t < N; ++t, angle += PI/N)
    {
        sincos(angle, axis.y, axis.x);
        maxNoise = max(EstimateNoise(centerCoord, axis), maxNoise);
    }

    _DenoiseOutputTextureRW[centerCoord] = float4(_DenoiseInputTexture[centerCoord].xyz, maxNoise);
}

/********************************* Denoising Kernel *********************************/

struct BilateralData
{
    float  z;
    float3 position;
    float3 normal;
    float  analytic;
};

BilateralData TapBilateralData(uint2 coordSS)
{
    BilateralData key;
    PositionInputs posInput;

    if ((DEPTH_WEIGHT > 0.0f) || (PLANE_WEIGHT > 0.0f))
    {
        posInput.deviceDepth = LOAD_TEXTURE2D(_DepthTexture, coordSS).r;
        key.z = Linear01Depth(posInput.deviceDepth, _ZBufferParams);
    }

    if (PLANE_WEIGHT > 0.0f)
    {
        posInput = GetPositionInput_Stereo(coordSS, _ScreenSize.zw, posInput.deviceDepth,
                                           UNITY_MATRIX_I_VP, UNITY_MATRIX_V, unity_StereoEyeIndex);
        key.position = posInput.positionWS;
    }

    if ((NORMAL_WEIGHT > 0.0f) || (PLANE_WEIGHT > 0.0f))
    {
        NormalData normalData;
        const float4 normalBuffer = _NormalBufferTexture[COORD_TEXTURE2D_X(coordSS)];
        DecodeFromNormalBuffer(normalBuffer, coordSS, normalData);
        key.normal = normalData.normalWS;
    }

    if (ANALYTIC_WEIGHT > 0.0f)
    {
        key.analytic = _DenoiseInputTexture[coordSS].z;
    }

    return key;
}

float ComputeBilateralWeight(BilateralData center, BilateralData tap)
{
    float depthWeight    = 1.0f;
    float normalWeight   = 1.0f;
    float planeWeight    = 1.0f;
    float analyticWeight = 1.0f;

    if (DEPTH_WEIGHT > 0.0f)
    {
        depthWeight = max(0.0f, 1.0f - abs(tap.z - center.z) * DEPTH_WEIGHT);
    }

    if (NORMAL_WEIGHT > 0.0f)
    {
        const float normalCloseness = sqr(sqr(dot(tap.normal, center.normal)));
        const float normalError = (1.0f - normalCloseness);
        normalWeight = max((1.0f - normalError * NORMAL_WEIGHT), 0.0f);
    }

    if (PLANE_WEIGHT > 0.0f)
    {
        // Change in position in camera space
        const float3 dq = center.position - tap.position;

        // How far away is this point from the original sample
        // in camera space? (Max value is unbounded)
        const float distance2 = dot(dq, dq);

        // How far off the expected plane (on the perpendicular) is this point? Max value is unbounded.
        const float planeError = max(abs(dot(dq, tap.normal)), abs(dot(dq, center.normal)));

        planeWeight = (distance2 < 0.0001f) ? 1.0f :
            pow(max(0.0f, 1.0f - 2.0f * PLANE_WEIGHT * planeError / sqrt(distance2)), 2.0f);
    }

    if (ANALYTIC_WEIGHT > 0.0f)
    {
        const float aDiff = abs(tap.analytic - center.analytic);
        analyticWeight = max(0.0f, 1.0f - (aDiff * ANALYTIC_WEIGHT));
    }

    return depthWeight * normalWeight * planeWeight * analyticWeight;
}

// Simple box filter to smooth out the noise estimate
float FilterNoiseEstimate(uint2 coordSS)
{
    float result = 0.0f;

    static const int R = 1; // Box radius (add 0.5 for center pixel)
    for (int j = -R; j <= R; ++j)
    {
        for (int i = -R; i <= R; ++i)
        {
            result += _DenoiseInputTexture[coordSS + int2(i, j)].w;
        }
    }

    return result / sqr(2 * R + 1);
}

// Separated bilateral filter (two passes, each with 2*Radius taps)
[numthreads(AREA_BILLATERAL_TILE_SIZE, AREA_BILLATERAL_TILE_SIZE, 1)]
void AreaShadowDenoise(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * AREA_BILLATERAL_TILE_SIZE + groupThreadId;
    centerCoord.x = centerCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);

    float2 SU = 0.0f;
    float wSum = 0.0f;

    const uint2 passIncr = _DenoisePass ? uint2(1, 0) : uint2(0, 1);
    const float noiseEstimate = _DenoisePass ? _DenoiseInputTexture[centerCoord].w : FilterNoiseEstimate(centerCoord);
    const float sigma = noiseEstimate * _DenoiseRadius;
    const int effectiveRadius = min(sigma * 2.0f, _DenoiseRadius);

    const BilateralData center = TapBilateralData(centerCoord);

    uint2 tapCoord = centerCoord - effectiveRadius * passIncr;
    for (int r = -effectiveRadius; r <= effectiveRadius; ++r, tapCoord += passIncr)
    {
        // Compute the weight (skip computation for the center)
        const float w = r ? gaussian(r, sigma) * ComputeBilateralWeight(center, TapBilateralData(tapCoord)) : 1.0f;

        SU += _DenoiseInputTexture[tapCoord].xy * w;
        wSum += w;
    }

    if (!_DenoisePass) // First pass
    {
        // Store the intermediate result
        _DenoiseOutputTextureRW[centerCoord] = float4(SU / wSum, _DenoiseInputTexture[centerCoord].z, noiseEstimate);
    }
    else // Second (and final) pass
    {
        // Return the final ratio
        _AreaShadowTextureRW[uint3(centerCoord, _RaytracingShadowSlot)] =
            (wSum > 0.0f && SU.y / wSum > 0.0f) ? saturate(SU.x / SU.y) : 1.0f;
    }
}
