// Forward pass
Pass
{		
	Tags { "LightMode"="GBuffer" }
	
	Stencil
	{
		WriteMask 7
		Ref  2
		Comp Always
		Pass Replace
	}	
		
	HLSLPROGRAM
	#pragma target 4.5
	
	#define UNITY_MATERIAL_LIT
	#define SHADERPASS SHADERPASS_GBUFFER
		
	struct ps_input
	{
		float4 pos : SV_POSITION;
		float2 uv : TEXCOORD0;
		float3 posWS : TEXCOORD1;
		float4 sphereInfo : TEXCOORD2;

#if VFX_NEEDS_COLOR_INTERPOLATOR
		nointerpolation float4 color : COLOR0;
#endif
		
#if HDRP_MATERIAL_TYPE_SPECULAR	
		nointerpolation float4 specularColor : COLOR1;
#endif
		// x: smoothness
		// y: metallic/thickness
		nointerpolation float2 materialProperties : TEXCOORD4;
	};
	
#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_COLOR color.rgb
#define VFX_VARYING_UV uv
#define VFX_VARYING_POSWS posWS	
#define VFX_VARYING_SPHERECENTER sphereInfo.xyz
#define VFX_VARYING_SPHERERADIUS sphereInfo.w

${VFXBegin:VFXVertexAdditionalProcess}
${VFXLoadParameter:{smoothness}}
o.materialProperties.x = smoothness;
#if HDRP_MATERIAL_TYPE_STANDARD
${VFXLoadParameter:{metallic}}
o.materialProperties.y = metallic;
#elif HDRP_MATERIAL_TYPE_SPECULAR
${VFXLoadParameter:{specularColor}}
o.specularColor = specularColor;
#elif HDRP_MATERIAL_TYPE_TRANSLUCENT
${VFXLoadParameter:{thickness}}
o.materialProperties.y = thickness;
#endif
${VFXEnd}
	
	${VFXInclude("Assets/VFXEditor/Shaders/ParticleSpheres/Pass.template")}	
	${VFXInclude("Assets/VFXEditor/Shaders/RenderPipeline/HDRP/VFXLit.template")}
					
	#pragma fragment frag
	void frag(ps_input i, OUTPUT_GBUFFER(outGBuffer), out float oDepth : SV_DepthLessEqual)
	{
		float3 normalWS;
		VFXClipSphereAndGetDepthOffsetAndNormal(oDepth, normalWS, i);
				
		SurfaceData surfaceData = VFXGetSurfaceData(normalWS,i);
		float3 ambient = VFXGetAmbient(normalWS);
		
		ENCODE_INTO_GBUFFER(surfaceData, ambient, i.pos, outGBuffer);
	}
	ENDHLSL
}
