${VFXBegin:VFXVertexCommonProcess}
#if VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)
o.VFX_VARYING_COLOR = color;
#endif
#if VFX_USE_ALPHA_CURRENT && defined(VFX_VARYING_ALPHA) 
o.VFX_VARYING_ALPHA = alpha;
#endif


#if USE_SOFT_PARTICLE && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)
${VFXLoadParameter:{invSoftParticlesFadeDistance}}
o.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE = invSoftParticlesFadeDistance;
#endif

#if (VFX_NEEDS_POSSS || USE_SOFT_PARTICLE) && defined(VFX_VARYING_POSSS)
o.VFX_VARYING_POSSS = VFXGetPOSSS(o.pos);
#endif

#if USE_ALPHA_TEST && defined(VFX_VARYING_ALPHATHRESHOLD)
${VFXLoadParameter:{alphaThreshold}}
o.VFX_VARYING_ALPHATHRESHOLD = alphaThreshold;
#endif
${VFXEnd}

${VFXBegin:VFXLoadSize}
float3 size = float3(sizeX,sizeX,sizeX);
#if VFX_USE_SIZEY_CURRENT
size.y = sizeY;
#endif
#if VFX_USE_SIZEZ_CURRENT
size.z = sizeZ;
#else
size.z = min(size.x,size.y);
#endif
${VFXEnd}

${VFXBegin:VFXFragmentCommonFunctions}#include "Assets/VFXEditor/Shaders/VFXCommonOutput.cginc"${VFXEnd}

${VFXBegin:VFXLoadAttributesOrCull}
#if VFX_HAS_INDIRECT_DRAW
#if USE_DEAD_LIST_COUNT
	if (index >= asuint(nbMax) - deadListCount.Load(0))
		return o;
#endif

	index = indirectBuffer[index];
	${VFXLoadAttributes}
#else
	if (index >= asuint(nbMax))
		return o;
	
	${VFXLoadAttributes:{alive}}
	if (!alive)
		return o;
	
	${VFXLoadAttributes:{(?!(alive))(\b\w)}}
#endif
${VFXEnd}
