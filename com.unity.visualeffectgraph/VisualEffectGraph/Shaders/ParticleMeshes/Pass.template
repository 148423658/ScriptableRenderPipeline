#if !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))
#error VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.
#endif

${VFXPerPassInclude}
${VFXGeneratedBlockFunction}

struct vs_input
{
	float3 pos : POSITION;
	float2 uv : TEXCOORD0;
	#ifdef VFX_VARYING_NORMAL
	float3 normal : NORMAL;
	#endif
	#ifdef VFX_VARYING_TANGENT
	float4 tangent : TANGENT;
	#endif
};

#pragma vertex vert
VFX_VARYING_PS_INPUTS vert(vs_input i, uint instanceID : SV_InstanceID)
{
	uint index = instanceID;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;

	${VFXLoadAttributesOrCull}
	${VFXProcessBlocks}
			
	if (!alive)
		return o;
	
	o.VFX_VARYING_UV.xy = i.uv;
	
	${VFXLoadSize}
	
	float4x4 elementToVFX = GetElementToVFXMatrix(axisX,axisY,axisZ,float3(angleX,angleY,angleZ),pivot,size,position);
	float3 vPos = mul(elementToVFX,float4(i.pos,1.0f)).xyz;

	o.VFX_VARYING_POSCS = TransformPositionVFXToClip(vPos);
	
	#ifdef VFX_VARYING_NORMAL // TODO Should use inverse transpose
	o.VFX_VARYING_NORMAL = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.normal)));
	#endif
	#ifdef VFX_VARYING_TANGENT
	o.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangent.xyz))),i.tangent.w);
	#endif

	${VFXVertexCommonProcess}

	${VFXVertexSetFlipbooksInterpolants}

	${VFXVertexAdditionalProcess}
			
	return o;
}

${VFXFragmentCommonFunctions}
