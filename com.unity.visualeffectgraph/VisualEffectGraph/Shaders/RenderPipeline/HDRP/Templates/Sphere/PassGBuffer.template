// Forward pass
Pass
{		
	Tags { "LightMode"="GBuffer" }
	
	Stencil
	{
		WriteMask 7
		Ref  2
		Comp Always
		Pass Replace
	}	
		
	HLSLPROGRAM
	#pragma target 4.5
	
	#define UNITY_MATERIAL_LIT
	#define SHADERPASS SHADERPASS_GBUFFER
		
	${VFXInclude("Assets/VFXEditor/Shaders/RenderPipeline/HDRP/VFXLitVaryings.template")}		
		
	struct ps_input
	{
		float4 pos : SV_POSITION;
		
		${VFXHDRPLitDeclareVaryings}
		
		float2 uv : TEXCOORD1;
		float3 posWS : TEXCOORD2;
		float4 sphereInfo : TEXCOORD3;
	};
	
#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_UV uv
#define VFX_VARYING_POSWS posWS	
#define VFX_VARYING_SPHERECENTER sphereInfo.xyz
#define VFX_VARYING_SPHERERADIUS sphereInfo.w

${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}
${VFXEnd}
	
	${VFXInclude("Assets/VFXEditor/Shaders/ParticleSpheres/Pass.template")}	
	${VFXInclude("Assets/VFXEditor/Shaders/RenderPipeline/HDRP/VFXLit.template")}
					
	#pragma fragment frag
	void frag(ps_input i, OUTPUT_GBUFFER(outGBuffer), out float oDepth : SV_DepthLessEqual)
	{
		float3 normalWS;
		VFXClipSphereAndGetDepthOffsetAndNormal(oDepth, normalWS, i);
				
		SurfaceData surfaceData;
		float3 ambient;
		VFXUVData dummy;
		VFXGetHDRPLitData(surfaceData,ambient,i,normalWS,dummy);
		
		ENCODE_INTO_GBUFFER(surfaceData, ambient, i.pos, outGBuffer);
	}
	ENDHLSL
}
