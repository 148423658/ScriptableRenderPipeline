// Depth pass
Pass
{		
	Tags { "LightMode"="DepthOnly" }

	ZWrite On
	Blend Off
	
	HLSLPROGRAM
	#pragma target 4.5
	#define UNITY_MATERIAL_LIT
	//#pragma multi_compile _ WRITE_NORMAL_BUFFER
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		#if USE_FLIPBOOK_INTERPOLATION
		float4 uv : TEXCOORD0;
		#else
		float2 uv : TEXCOORD0;	
		#endif
		#if USE_ALPHA_TEST || USE_FLIPBOOK_INTERPOLATION || VFX_USE_ALPHA_CURRENT
		// x: alpha threshold
		// y: frame blending factor
		// z: alpha
		// w: smoothness
		nointerpolation float4 builtInInterpolants : TEXCOORD1;
		#endif
		
		#ifdef WRITE_NORMAL_BUFFER
		float4 normal : TEXCOORD2; // normal scale is stored in w
		#if HDRP_USE_NORMAL_MAP || USE_NORMAL_BENDING
		float4 tangent : TEXCOORD3;
		#endif
		#if USE_NORMAL_BENDING
		float2 bentFactors : TEXCOORD6;
		#endif
		#endif
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_ALPHA builtInInterpolants.z
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.x
#define VFX_VARYING_FRAMEBLEND builtInInterpolants.y
#define VFX_VARYING_UV uv

#ifdef WRITE_NORMAL_BUFFER
#define VFX_VARYING_NORMAL normal.xyz
#define VFX_VARYING_SMOOTHNESS builtInInterpolants.w
#if HDRP_USE_NORMAL_MAP
#define VFX_VARYING_TANGENT tangent
#define VFX_VARYING_NORMALSCALE normal.w
#endif
#endif

${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}

#ifdef WRITE_NORMAL_BUFFER
o.normal.xyz = TransformDirectionVFXToWorld(-axisZ);
#if HDRP_USE_NORMAL_MAP || USE_NORMAL_BENDING
o.tangent.xyz = TransformDirectionVFXToWorld(axisX);
#endif
#if USE_NORMAL_BENDING
${VFXLoadParameter:{bentNormalFactor}}
o.bentFactors = vOffsets * bentNormalFactor;
#endif
#endif
${VFXEnd}

	${VFXInclude("Shaders/ParticleQuads/Pass.template")}
	#define SHADERPASS SHADERPASS_DEPTH_ONLY
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLit.template")}
		
	#pragma fragment frag
	void frag(ps_input i
#ifdef WRITE_NORMAL_BUFFER
	, OUTPUT_NORMALBUFFER(outNormalBuffer)
#if USE_DOUBLE_SIDED
	, bool frontFace : SV_IsFrontFace
#endif
#else
	, out float4 outColor : SV_Target
#endif
	)
	{
#ifdef WRITE_NORMAL_BUFFER		
		#if USE_DOUBLE_SIDED
		const float faceMul = frontFace ? 1.0f : -1.0f;
		#else
		const float faceMul = 1.0f;
		#endif
			
		float3 normalWS = i.VFX_VARYING_NORMAL * faceMul;
		const VFXUVData uvData = GetUVData(i);
		
		#if HDRP_USE_NORMAL_MAP || USE_NORMAL_BENDING
		float3 tangentWS = i.tangent;
		float3 bitangentWS = cross(i.tangent,i.VFX_VARYING_NORMAL);
		
		#if USE_NORMAL_BENDING	
		float3 bentFactors = float3(i.bentFactors.xy,sqrt(1.0f - i.bentFactors.x * i.bentFactors.x * i.bentFactors.y * i.bentFactors.y));
		normalWS = normalize(tangentWS * bentFactors.x + bitangentWS * bentFactors.y + normalWS * bentFactors.z);
		tangentWS = normalize(cross(normalWS,bitangentWS));
		bitangentWS = cross(tangentWS,normalWS);
		tangentWS *= faceMul;
		#endif
		
		#if HDRP_USE_NORMAL_MAP
		float3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
		float3x3 tbn = float3x3(tangentWS,bitangentWS,normalWS);
		normalWS = normalize(lerp(normalWS,mul(n,tbn),i.VFX_VARYING_SMOOTHNESS));
		#endif
		#endif
		
		SurfaceData surfaceData;
		BuiltinData builtinData;
		VFXGetHDRPLitData(surfaceData,builtinData,i,normalWS,uvData);

		ENCODE_INTO_NORMALBUFFER(surfaceData, i.pos, outNormalBuffer);
#else
		float alpha = VFXGetFragmentColor(i).a;
#if HDRP_USE_BASE_COLOR_MAP
		alpha *= VFXGetTextureColor(VFX_SAMPLER(baseColorMap),i).a;	
#endif
		VFXClipFragmentColor(alpha,i);
#ifdef SCENESELECTIONPASS
		// We use depth prepass for scene selection in the editor, this code allow to output the outline correctly
		outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
#else
		outColor = (float4)0;
#endif
#endif		
	}
	ENDHLSL
}
