Pass
{		
	Tags { "LightMode"="Forward" }
	
	Stencil
	{
		WriteMask 7
		Ref  2
		Comp Always
		Pass Replace
	}	
		
	HLSLPROGRAM
	#pragma target 4.5
	
	#define UNITY_MATERIAL_LIT
	#define LIGHTLOOP_TILE_PASS
	#define _SURFACE_TYPE_TRANSPARENT
	#define _ENABLE_FOG_ON_TRANSPARENT
	#define _BLENDMODE_PRE_MULTIPLY
	#pragma multi_compile USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
	#pragma multi_compile _ DEBUG_DISPLAY
	//#pragma enable_d3d11_debug_symbols
	
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLitVaryings.template")}	
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		
		${VFXHDRPLitDeclareVaryings}
		
		float2 uv : TEXCOORD1;	
		float3 normal : TEXCOORD2;
		#if USE_NORMAL_MAP
		float4 tangent : TEXCOORD3;
		#endif
		#if USE_ALPHA_TEST
		// x: alpha threshold
		nointerpolation float builtInInterpolants : TEXCOORD4;
		#endif
	};
	
	struct ps_output
	{
		float4 color : SV_Target0;
	};

${VFXHDRPLitVaryingsMacros}

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_UV uv
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.x
#define VFX_VARYING_NORMAL normal
#if USE_NORMAL_MAP
#define VFX_VARYING_TANGENT tangent
#endif

${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}
${VFXEnd}

	${VFXInclude("Shaders/ParticleMeshes/Pass.template")}
	#define SHADERPASS SHADERPASS_FORWARD
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLit.template")}	
		
	#pragma fragment frag
	void frag(ps_input i, out float4 outColor : SV_Target0
#if USE_DOUBLE_SIDED
	, bool frontFace : SV_IsFrontFace
#endif
	)
	{
		${VFXComputeNormalWS}
		outColor = VFXGetPixelOutputForward(i,normalWS,uvData);
	}
	ENDHLSL
}
