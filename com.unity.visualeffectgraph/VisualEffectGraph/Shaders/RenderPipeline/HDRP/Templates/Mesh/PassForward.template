Pass
{		
	Tags { "LightMode"="Forward" }
	
	Stencil
	{
		WriteMask 7
		Ref  2
		Comp Always
		Pass Replace
	}	
		
	HLSLPROGRAM
	#pragma target 4.5
	
	#define UNITY_MATERIAL_LIT
	#define LIGHTLOOP_TILE_PASS
	#define _SURFACE_TYPE_TRANSPARENT
	#define _ENABLE_FOG_ON_TRANSPARENT
	#define _BLENDMODE_PRE_MULTIPLY
	#pragma multi_compile USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
	#pragma multi_compile _ DEBUG_DISPLAY
	//#pragma enable_d3d11_debug_symbols
	
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLitVaryings.template")}	
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		
		${VFXHDRPLitDeclareVaryings}
		
		float2 uv : TEXCOORD1;	
		float3 normal : TEXCOORD2;
		#if HDRP_USE_NORMAL_MAP
		float4 tangent : TEXCOORD3;
		#endif
		#if USE_ALPHA_TEST
		// x: alpha threshold
		nointerpolation float builtInInterpolants : TEXCOORD4;
		#endif
	};
	
	struct ps_output
	{
		float4 color : SV_Target0;
	};

${VFXHDRPLitVaryingsMacros}

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_UV uv
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.x
#define VFX_VARYING_NORMAL normal
#if HDRP_USE_NORMAL_MAP
#define VFX_VARYING_TANGENT tangent
#endif

${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}
${VFXEnd}

	${VFXInclude("Shaders/ParticleMeshes/Pass.template")}
	#define SHADERPASS SHADERPASS_FORWARD
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLit.template")}	
		
	#pragma fragment frag
	void frag(ps_input i, out float4 outColor : SV_Target0
#if USE_DOUBLE_SIDED
	, bool frontFace : SV_IsFrontFace
#endif
	)
	{
		#if USE_DOUBLE_SIDED
		const float faceMul = frontFace ? 1.0f : -1.0f;
		#else
		const float faceMul = 1.0f;
		#endif
		
		float3 normalWS = normalize(i.normal * faceMul);
		const VFXUVData uvData = GetUVData(i);
		
		#if HDRP_USE_NORMAL_MAP
		float3 tangentWS = normalize(i.tangent.xyz);
		float3 bitangentWS = cross(normalWS,tangentWS) * (i.tangent.w * faceMul);
		float3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
		float3x3 tbn = float3x3(tangentWS,bitangentWS,normalWS);
		normalWS = normalize(lerp(normalWS,mul(n,tbn),i.materialProperties.z));
		#endif

		float3 diffuseLighting;
        float3 specularLighting;
		
		SurfaceData surfaceData;
		BuiltinData builtinData;
		BSDFData bsdfData;
		PreLightData preLightData;
		uint2 tileIndex = uint2(i.pos.xy) / GetTileSize();
		VFXGetHDRPLitData(surfaceData,builtinData,bsdfData,preLightData,i,normalWS,uvData,tileIndex);
		
		PositionInputs posInput = GetPositionInput(i.pos.xy, _ScreenSize.zw, i.pos.z, i.pos.w, i.posRWS, tileIndex);
		
		#if IS_OPAQUE_PARTICLE
		uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
		#elif USE_ONLY_AMBIENT_LIGHTING
		uint featureFlags = LIGHTFEATUREFLAGS_ENV;
		#else
		uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
		#endif
		
		LightLoop(GetWorldSpaceNormalizeViewDir(i.posRWS), posInput, preLightData, bsdfData, builtinData, featureFlags, diffuseLighting, specularLighting);

		outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
        outColor = EvaluateAtmosphericScattering(posInput, outColor);
		
		#ifdef DEBUG_DISPLAY
		// Same code in ShaderPassForwardUnlit.shader
		if (_DebugViewMaterial != 0)
		{
			float3 result = float3(1.0, 0.0, 1.0);

			bool needLinearToSRGB = false;

			GetPropertiesDataDebug(_DebugViewMaterial, result, needLinearToSRGB);
			//GetVaryingsDataDebug(_DebugViewMaterial, i, result, needLinearToSRGB);
			GetBuiltinDataDebug(_DebugViewMaterial, builtinData, result, needLinearToSRGB);
			GetSurfaceDataDebug(_DebugViewMaterial, surfaceData, result, needLinearToSRGB);
			GetBSDFDataDebug(_DebugViewMaterial, bsdfData, result, needLinearToSRGB);

			// TEMP!
			// For now, the final blit in the backbuffer performs an sRGB write
			// So in the meantime we apply the inverse transform to linear data to compensate.
			if (!needLinearToSRGB)
				result = SRGBToLinear(max(0, result));

			outColor = float4(result, 1.0);
		}
		#endif
	}
	ENDHLSL
}
