#if !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))
#error VFX_VARYING_PS_INPUTS and VFX_VARYING_POSCS must be defined.
#endif

#pragma vertex vert

VFX_VARYING_PS_INPUTS vert(uint id : SV_VertexID, uint instanceID : SV_InstanceID)
{
	uint index = id >> 2;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;
	
	${VFXLoadAttributesOrCull}
	${VFXProcessBlocks}
			
	if (!alive)
		return o;

	#if TARGET_FROM_ATTRIBUTES
	${VFXLoadSize}
	float4x4 elementToVFX = GetElementToVFXMatrix(axisX,axisY,axisZ,float3(angleX,angleY,angleZ),pivot,size,position);

	position = mul(elementToVFX,float4(0,0,0,1)).xyz;
	
	${VFXLoadParameter:{targetOffset}}
	targetPosition = mul(elementToVFX,float4(targetOffset * 2.0f,1)).xyz;
	#endif
		
	float4 pos0 = TransformPositionVFXToClip(position);
	float4 pos1 = TransformPositionVFXToClip(targetPosition);
	
	float2 ndcPos0 = pos0.xy / pos0.w;
	float2 ndcPos1 = pos1.xy / pos1.w;
	
	float2 dir = ndcPos0 - ndcPos1;
	float2 normal = normalize(dir.yx * float2(-1,-UNITY_MATRIX_P[1][1] / UNITY_MATRIX_P[0][0]));
	
	float2 minThickness0 = 2.0f * pos0.w / float2(UNITY_MATRIX_P[0][0] * _ScreenParams.x,UNITY_MATRIX_P[1][1] * _ScreenParams.y);
	float2 minThickness1 = 2.0f * pos1.w / float2(UNITY_MATRIX_P[0][0] * _ScreenParams.x,UNITY_MATRIX_P[1][1] * _ScreenParams.y);
	
	float2 dPos = normal * 0.0f;
	float4 dPos0 = float4(sign(normal) * max(minThickness0,abs(dPos)), 0.0f, 0.0f);
	float4 dPos1 = float4(sign(normal) * max(minThickness1,abs(dPos)), 0.0f, 0.0f);
	float4 vPos[4] = { pos0 + dPos0, pos0 - dPos0, pos1 + dPos1, pos1 - dPos1};
	
	o.VFX_VARYING_POSCS = vPos[id & 3];
	
	${VFXVertexCommonProcess}
	${VFXVertexAdditionalProcess}

	return o;
}

${VFXFragmentCommonFunctions}
