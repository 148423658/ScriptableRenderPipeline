// Forward pass
Pass
{		
	Tags { "LightMode"="GBuffer" }
	
	Stencil
	{
		WriteMask 7
		Ref  2
		Comp Always
		Pass Replace
	}	
		
	HLSLPROGRAM
	#pragma target 4.5
	
	#define UNITY_MATERIAL_LIT
	#define SHADERPASS SHADERPASS_GBUFFER
	
	${VFXInclude("Assets/VFXEditor/Shaders/RenderPipeline/HDRP/VFXLitVaryings.template")}	
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		
		${VFXHDRPLitDeclareVaryings}

		#if USE_SOFT_PARTICLE || USE_ALPHA_TEST
		// x: inverse soft particles fade distance
		// y: alpha threshold
		nointerpolation float2 builtInInterpolants : TEXCOORD1;
		#endif
		#if USE_SOFT_PARTICLE
		float4 projPos : TEXCOORD2;		
		#endif
		
		float3 offsets : TEXCOORD3;
		nointerpolation float3 rotX : TEXCOORD4;
		nointerpolation float3 rotY : TEXCOORD5;		
		
		#if HDRP_NEEDS_UVS
		nointerpolation uint faceID : TEXCOORD6;
		#endif
	};
	
	struct ps_output
	{
		float4 color : SV_Target0;
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_POSSS projPos
#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y
#define VFX_VARYING_OFFSETS offsets
#define VFX_VARYING_ROTX rotX
#define VFX_VARYING_ROTY rotY
#if HDRP_NEEDS_UVS
#define VFX_VARYING_FACEID faceID
#endif
				
${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}
${VFXEnd}

	${VFXInclude("Assets/VFXEditor/Shaders/ParticleHexahedron/Pass.template")}		
	${VFXInclude("Assets/VFXEditor/Shaders/RenderPipeline/HDRP/VFXLit.template")}	
		
	#pragma fragment frag
	void frag(ps_input i, OUTPUT_GBUFFER(outGBuffer)
#if USE_DOUBLE_SIDED
	, bool frontFace : SV_IsFrontFace
#endif
	)
	{
#if !USE_DOUBLE_SIDED	
		const bool frontFace = true;
#endif
		float3 normalWS;
		float2 uvs = VFXCubeGetUV(i);
		
		#if HDRP_USE_NORMAL_MAP
		float3 n = VFXGetTextureNormal(VFX_SAMPLER(normalMap),uvs);
		normalWS = VFXCubeTransformNormalTS(i,n,frontFace);
		normalWS = lerp(VFXCubeGetLocalNormal(i),normalWS,i.materialProperties.z);
		#else
		normalWS = VFXCubeGetLocalNormal(i) * (frontFace ? 1.0f : -1.0f);
		#endif
		normalWS = VFXCubeTransformNormalWS(i,normalWS);
		normalWS = normalize(normalWS);

		SurfaceData surfaceData;
		float3 ambient;
		VFXGetHDRPLitData(surfaceData,ambient,i,normalWS,uvs);
		
		ENCODE_INTO_GBUFFER(surfaceData, ambient, i.pos, outGBuffer);
	}
	ENDHLSL
}
