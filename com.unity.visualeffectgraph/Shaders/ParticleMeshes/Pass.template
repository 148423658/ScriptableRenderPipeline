#if !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))
#error VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.
#endif

${VFXPerPassInclude}
${VFXGeneratedBlockFunction}

struct vs_input
{
	float3 pos : POSITION;
	float2 uv : TEXCOORD0;
	#ifdef VFX_VARYING_NORMAL
	float3 normal : NORMAL;
	#endif
	#ifdef VFX_VARYING_TANGENT
	float4 tangent : TANGENT;
	#endif
};

#pragma vertex vert
VFX_VARYING_PS_INPUTS vert(vs_input i, uint instanceID : SV_InstanceID)
{
	uint index = instanceID;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;

	${VFXLoadAttributesOrCull}
	${VFXProcessBlocks}
			
	if (!alive)
		return o;
	
	o.VFX_VARYING_UV.xy = i.uv;
	
	${VFXLoadSize}
	
	float4x4 elementToVFX = GetElementToVFXMatrix(axisX,axisY,axisZ,float3(angleX,angleY,angleZ),float3(pivotX,pivotY,pivotZ),size3,position);
	float3 vPos = mul(elementToVFX,float4(i.pos,1.0f)).xyz;
	float4 csPos = TransformPositionVFXToClip(vPos);
	o.VFX_VARYING_POSCS = csPos;

	#ifdef VFX_VARYING_VELOCITY
	float4x4 previousElementToVFX = (float4x4)0;
	previousElementToVFX[3] = float4(0,0,0,1);

	UNITY_UNROLL
	for (int itIndexMatrixRow = 0; itIndexMatrixRow < 3; ++itIndexMatrixRow)
	{
		UNITY_UNROLL
		for (int itIndexMatrixCol = 0; itIndexMatrixCol < 4; ++itIndexMatrixCol)
		{
			uint itIndexMatrix = itIndexMatrixCol * 4 + itIndexMatrixRow;
			uint read = elementToVFXBufferPrevious.Load((index * 16 + itIndexMatrix) << 2);
			previousElementToVFX[itIndexMatrixRow][itIndexMatrixCol] = asfloat(read);
		}
	}

	uint previousFrameIndex = elementToVFXBufferPrevious.Load((index * 16 + 15) << 2);
	
	float3 oldvPos = mul(previousElementToVFX,float4(i.pos,1.0f)).xyz;
	float4 oldcsPos = TransformPositionVFXToClip(oldvPos);
	
	float2 velocity = (csPos.xy/csPos.w) - (oldcsPos.xy/oldcsPos.w);
	velocity.y *= -1.0f;

	if (asuint(currentFrameIndex) - previousFrameIndex != 1u)
	{
		velocity = 0.0f;
	}

	o.VFX_VARYING_VELOCITY = velocity;
	#endif
	
	#ifdef VFX_VARYING_NORMAL // TODO Should use inverse transpose
	o.VFX_VARYING_NORMAL = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.normal)));
	#endif
	#ifdef VFX_VARYING_TANGENT
	o.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangent.xyz))),i.tangent.w);
	#endif

	${VFXVertexCommonProcess}

	${VFXVertexSetFlipbooksInterpolants}

	${VFXVertexAdditionalProcess}

	return o;
}

${VFXBegin:VFXComputeNormalWS}
#if USE_DOUBLE_SIDED
const float faceMul = frontFace ? 1.0f : -1.0f;
#else
const float faceMul = 1.0f;
#endif

float3 normalWS = normalize(i.VFX_VARYING_NORMAL * faceMul);
const VFXUVData uvData = GetUVData(i);

#if defined(VFX_VARYING_TANGENT) && USE_NORMAL_MAP
float3 tangentWS = normalize(i.VFX_VARYING_TANGENT.xyz);
float3 bitangentWS = cross(normalWS,tangentWS) * (i.VFX_VARYING_TANGENT.w * faceMul);
float3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
float3x3 tbn = float3x3(tangentWS,bitangentWS,normalWS);
float normalScale = 1.0f;
#ifdef VFX_VARYING_NORMALSCALE
normalScale = i.VFX_VARYING_NORMALSCALE;
#endif
normalWS = normalize(lerp(normalWS,mul(n,tbn),normalScale));
#endif
${VFXEnd}

${VFXFragmentCommonFunctions}

${VFXBegin:VFXVertexAdditionalProcess}${VFXEnd}
